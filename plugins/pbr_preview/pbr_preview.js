"use strict";(()=>{(()=>{let L,k,A,B,D,N,M,X,y,q,K,H,W,S,j,$,Y,Z,ee,te,I,ie,U,O,F,G,Q,V={},c="pbr_preview",le="1.0.0",C="_NONE_",l={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new THREE.Color(16777215)},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new THREE.Color(0)},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new THREE.Color(0)},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new THREE.Color(16777215)},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new THREE.Color(16777215)},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new THREE.Color("rgb(128, 128, 255)")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new THREE.Color(16777215)}},z=(t=!0)=>{let e=Project?Project.textures??Texture.all:Texture.all;return t?e.filter(n=>n.layers_enabled&&n.layers.length>0).flatMap(n=>n.layers):e};class x{constructor(e,n){this._scope=e??z(),this._materialUuid=n}merToCanvas(){let e=this.getTexture(l.emissive),n=this.getTexture(l.roughness),r=this.getTexture(l.metalness);if(!e&&!n&&!r){let{metalness:a,emissive:s,roughness:i}=this.decodeMer();a&&(r=x.makePixelatedCanvas(a)),s&&(e=x.makePixelatedCanvas(s)),i&&(n=x.makePixelatedCanvas(i))}return{emissiveMap:e,roughnessMap:n,metalnessMap:r}}getMaterial(e={}){let{emissiveMap:n,roughnessMap:r,metalnessMap:a}=this.merToCanvas(),s=new THREE.MeshStandardMaterial({map:this.getTexture(l.albedo)??x.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(o=>o.selected)?.canvas??Texture.getDefault().canvas),aoMap:this.getTexture(l.ao),bumpMap:this.getTexture(l.height),metalnessMap:a,metalness:a?1:0,roughnessMap:r,roughness:1,emissiveMap:n,emissiveIntensity:n?1:0,emissive:n?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:1,alphaTest:.5,...e}),i=this.getTexture(l.normal);return i&&(s.normalMap=i,s.normalScale=new THREE.Vector2(1,1)),s}saveTexture(e,n){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][e.id]=n.uuid,n.extend({channel:e.id}))}findTexture(e,n=!0){if(!Project)return null;let r=this._scope.find(o=>o.channel&&(o.channel===e||o.channel===e.id));if(r)return r;let a=typeof e=="string"?e:e.id;Project.pbr_materials??={};let s=Project.pbr_materials[this._materialUuid];if(!s&&n&&a!==C){let o=new RegExp(`_*${a}(.[^.]+)?$`,"i");return this._scope.find(h=>o.test(h.name))??null}let i=s?.[a];return i?this._scope.find(o=>o.uuid===i)??null:null}static makePixelatedCanvas(e){let n=new THREE.CanvasTexture(e,void 0,void 0,void 0,THREE.NearestFilter,THREE.NearestFilter);return n.needsUpdate=!0,n}getTexture(e){let n=this.findTexture(e);return n?x.makePixelatedCanvas(n.canvas):null}static extractChannel(e,n){let r=e.canvas,a=r.width,s=r.height,i=r.getContext("2d");if(!i||!a||!s)return null;let o=document.createElement("canvas");o.width=a,o.height=s;let h=o.getContext("2d");if(!h)return null;let m={r:0,g:1,b:2,a:3}[n],{data:d}=i.getImageData(0,0,a,s),p=new Uint8ClampedArray(a*s*4);for(let f=0;f<d.length;f+=4)p[f]=d[f+m],p[f+1]=d[f+m],p[f+2]=d[f+m],p[f+3]=255;let T=new ImageData(p,a,s);return h.putImageData(T,0,0),o}decodeMer(e=1){let n=this.findTexture("mer",!0);if(!n)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let r=x.extractChannel(n,"r"),a=x.extractChannel(n,"g"),s=x.extractChannel(n,"b"),i=x.extractChannel(n,"a"),o=document.createElement("canvas");o.width=n.img.width??16,o.height=n.img.height??16;let h=this.findTexture(l.albedo);h&&(o.width=h.img.width??16,o.height=h.img.height??16);let m=o.getContext("2d"),d=a?.getContext("2d"),p=h?.canvas?.getContext("2d");if(!m||!p||!d)return{metalness:r,emissive:a,roughness:s,sss:i};let T=p.getImageData(0,0,o.width,o.height),f=d.getImageData(0,0,o.width,o.height),b=new Uint8ClampedArray(o.width*o.height*4);for(let g=0;g<T.data.length;g+=4){if(f.data[g]>e){b[g]=T.data[g],b[g+1]=T.data[g+1],b[g+2]=T.data[g+2],b[g+3]=255;continue}b[g]=0,b[g+1]=0,b[g+2]=0,b[g+3]=255}return m.putImageData(new ImageData(b,o.width,o.height),0,0),{metalness:r,emissive:o,emissiveLevel:a,roughness:s,sss:i}}createMer(e=!1){let n=this.findTexture(l.metalness,e),r=this.findTexture(l.emissive,e),a=this.findTexture(l.roughness,e),s=this.findTexture("sss",!1),i=Math.max(n?.img.width??0,r?.img.width??0,a?.img.width??0,Project?Project.texture_width:0,16),o=Math.max(n?.img.height??0,r?.img.height??0,a?.img.height??0,Project?Project.texture_height:0,16),h=document.createElement("canvas");h.width=i,h.height=o;let m=h.getContext("2d");if(!m)return null;let d=n?.img?x.extractChannel(n,"r"):null,p=r?.img?x.extractChannel(r,"g"):null,T=a?.img?x.extractChannel(a,"b"):null,f=s&&s?.img?x.extractChannel(s,"a"):null,b=d?.getContext("2d")?.getImageData(0,0,i,o)??new ImageData(i,o),g=p?.getContext("2d")?.getImageData(0,0,i,o)??new ImageData(i,o),u=T?.getContext("2d")?.getImageData(0,0,i,o)??new ImageData(i,o),_=f?.getContext("2d")?.getImageData(0,0,i,o)??new ImageData(new Uint8ClampedArray(i*o*4).fill(255),i,o),w=new Uint8ClampedArray(i*o*4);for(let v=0;v<w.length;v+=4)w[v]=b.data[v],w[v+1]=g.data[v],w[v+2]=u.data[v],w[v+3]=_.data[v];return m.putImageData(new ImageData(w,i,o),0,0),h}static createNormalMap(e,n=!1){let r=e.canvas.getContext("2d");if(!r)return null;let a=Math.max(e.img.width??e.canvas.width,Project?Project.texture_width:0,16),s=Math.max(e.img.height??e.canvas.height,Project?Project.texture_height:0,16),{data:i}=r.getImageData(0,0,a,s),o=document.createElement("canvas"),h=o.getContext("2d");if(!h)return null;let m=(u,_)=>{let w=(u+_*a)*4;return i[w]/255};o.width=a,o.height=s,h.drawImage(e.img,0,0,a,s);let d=h.getImageData(0,0,a,s),p=d.data,T=u=>{let _=Math.sqrt(u[0]*u[0]+u[1]*u[1]+u[2]*u[2]);return[u[0]/_,u[1]/_,u[2]/_]};for(let u=0;u<s;u++)for(let _=0;_<a;_++){let w=m(Math.max(_-1,0),u),v=m(Math.min(_+1,a-1),u),pe=m(_,Math.max(u-1,0)),ge=m(_,Math.min(u+1,s-1)),fe=v-w,xe=ge-pe,J=T([-fe,-xe,1]),R=(u*a+_)*4;p[R]=(J[0]+1)/2*255,p[R+1]=(J[1]+1)/2*255,p[R+2]=(J[2]+1)/2*255,p[R+3]=n?m(_,u)*255:255}h.putImageData(d,0,0);let f=o.toDataURL(),b=`${e.name.replace(/_height(map)?/i,"")}_normal`;if(e instanceof TextureLayer){let u=new TextureLayer({name:b,data_url:f,visible:!0},e.texture);return u.addForEditing(),u}let g=new Texture({name:b,saved:!1,particle:!1,keep_size:!1}).fromDataURL(f);return Project&&g.add(),g}}class E{constructor({colors:e}){this._colors={...Object.fromEntries(Object.keys(l).map(n=>[n,l[n].default??new THREE.Color(4294967040)])),...e}}get colors(){return this._colors}set colors(e){this._colors={...this._colors,...e}}getChannel(e){return this._colors[e]}static makeLinearColor(e){let n=Math.min(1,Math.max(0,e));return new THREE.Color(n,n,n).convertSRGBToLinear()}static fromSettings(){let e=Number(U.get()),n=Number(O.get()),r=F.get().toString(),a=Number(G.get()),s=ColorPanel.get(),i={[l.albedo.id]:new THREE.Color(s),[l.metalness.id]:E.makeLinearColor(e),[l.roughness.id]:E.makeLinearColor(n),[l.emissive.id]:new THREE.Color(r??"#000000"),[l.height.id]:E.makeLinearColor(a),[l.normal.id]:l.normal.default??new THREE.Color("#8080ff")};return new E({colors:i})}}K=new Property(TextureLayer,"enum","channel",{default:C,values:Object.keys(l).map(t=>l[t].id),label:"PBR Channel",exposed:!1}),q=new Property(Texture,"enum","channel",{default:C,values:Object.keys(l).map(t=>l[t].id),label:"PBR Channel",exposed:!1}),Y=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),Z=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),ee=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!0,values:[],label:"PBR Mode"});let ne=t=>{let e=Project?Project.selected_texture:Texture.all.find(r=>r.selected);if(!e)return;let n=new x(e.layers_enabled?e.layers:Project?Project.textures:null,e.uuid).createMer(!1);n&&n.toBlob(async r=>{if(!r)return;let[a,s]=Project?[`${e.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await r.arrayBuffer(),type:"PNG",name:a,extensions:["png"],resource_id:"mer",savetype:"image",startpath:s},t)})},P=t=>{if(!Project||Texture.all.length===0)return;let e=!1;Project.elements.forEach(n=>{n instanceof Cube&&Object.keys(n.faces).forEach(r=>{let s=n.faces[r].getTexture();if(!s)return;let i=Project.materials[s.uuid];i.isShaderMaterial&&!Project.bb_materials[s.uuid]&&(Project.bb_materials[s.uuid]=i);let o=new x(s.layers_enabled?s.layers.filter(h=>h.visible)??null:Project.textures,s.uuid).getMaterial(t);Project.materials[s.uuid]=THREE.ShaderMaterial.prototype.copy.call(o,i),Canvas.updateAllFaces(s),e=!0})}),Project.pbr_active=e},ce=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(e=>{let r=t.faces[e].getTexture();if(!r)return;let a=Project.bb_materials[r.uuid];a&&(Project.materials[r.uuid]=a)})}),Project.pbr_active=!1,Canvas.updateAll())},ae=(t,e)=>{let n=e??document.createElement("canvas"),r=n.getContext("2d");if(!r)return null;let a=Math.max(Project?Project.texture_width:16,16),s=Math.max(Project?Project.texture_height:16,16);return n.width=a,n.height=s,r.fillStyle=`rgb(${t.r*255}, ${t.g*255}, ${t.b*255})`,r.fillRect(0,0,a,s),n.toDataURL()},ue=()=>{if(!Project)return;let t=z();Project.textures.forEach(e=>{let n=new x(t,e.uuid),r=n.findTexture(l.normal,!1)?.name,a=n.findTexture(l.height,!1)?.name,s=n.findTexture(l.albedo,!1)?.name,i=n.findTexture(l.metalness,!1)?.name,o=n.findTexture(l.emissive,!1)?.name,h=n.findTexture(l.roughness,!1)?.name,m={};return s||(m.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!i&&!o&&!h&&(m.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},m.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},m.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),r&&a&&(m.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),y=new Dialog(`${c}_texture_set`,{id:`${c}_texture_set`,title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:m,onConfirm(d){let p=Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName(),T=i||o||h,f={format_version:"1.16.100","minecraft:texture_set":{color:(s?pathToName(s,!1):d.baseColor?.toHexString())??p,metalness_emissive_roughness:[d.metalness??0,d.emissive??0,d.roughness??255]}};d.depthMap==="normal"&&r?f["minecraft:texture_set"].normal=pathToName(r,!1):(!r||d.depthMap==="heightmap")&&a&&(f["minecraft:texture_set"].heightmap=pathToName(a,!1));let b=u=>{let _=d.depthMap==="normal"?r:a;if(!_)return u();Blockbench.export({content:_,type:"PNG",name:`${p}_${d.depthMap}`,extensions:["png"],resource_id:d.depthMap,startpath:Project.export_path},u)},g=()=>b(()=>{Blockbench.export({content:JSON.stringify(f,null,2),type:"JSON",name:`${p}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path},()=>{Blockbench.showQuickMessage("Texture set created",2e3),y.hide()})});if(T){ne(u=>{f["minecraft:texture_set"].metalness_emissive_roughness=pathToName(u,!1),g()});return}g()},cancelIndex:1}),y.show(),y})},re=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project"],se=()=>Project&&Project.pbr_active&&P(),de=()=>{re.forEach(t=>{Blockbench.addListener(t,se)})},oe=()=>{re.forEach(t=>{Blockbench.removeListener(t,se)})},he=()=>{j=new BarSelect("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:THREE.NoToneMapping,value:Preview.selected.renderer.toneMapping??THREE.NoToneMapping,icon:"monochrome_photos",options:{[THREE.NoToneMapping]:"None",[THREE.LinearToneMapping]:"Linear",[THREE.ReinhardToneMapping]:"Reinhard",[THREE.CineonToneMapping]:"Cineon",[THREE.ACESFilmicToneMapping]:"ACES"},onChange({value:t}){let e=Number(S.get());Preview.all.forEach(n=>{n.renderer.toneMapping=Number(t),n.renderer.toneMappingExposure=e}),Preview.selected.renderer.toneMapping=Number(t),Preview.selected.renderer.toneMappingExposure=e,Blockbench.showQuickMessage(`Tone mapping set to ${this.getNameFor(t)}`,2e3),M.value||M.set(!0),P()}}),S=new BarSlider("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",value:1,icon:"exposure",step:.1,min:-2,max:2,onBefore(){Number(j.get())===THREE.NoToneMapping&&j.change(THREE.LinearToneMapping.toString()),M.set(!0)},onChange({value:t}){let e=Math.max(-2,Math.min(2,Number(t)));Preview.all.forEach(n=>{n.renderer.toneMappingExposure=e}),Preview.selected.renderer.toneMappingExposure=e},onAfter(){P()}}),B=new Action(`${c}_generate_normal`,{icon:"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(TextureLayer.selected||Texture.all.find(t=>t.selected))!==void 0,click(){let t=TextureLayer.selected??Project?Project.selected_texture.selected_layer??Project.selected_texture:Texture.getDefault();if(!t)return;let e=new x(t.layers_enabled?t.layers:z(),t.uuid),n=x.createNormalMap(t);if(n){e.saveTexture(l.normal,n),n.select(),Blockbench.showQuickMessage("Normal map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate normal map",2e3)}}),A=new Action(`${c}_create_mer`,{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",click(){ne()}}),L=new Action(`${c}_decode_mer`,{icon:"arrow_split",name:"Decode MER",description:"Decodes a MER texture map into metalness, emissive, and roughness channels",condition:()=>!!Project&&Project.selected_texture!==null&&!Project.selected_texture.layers_enabled,click(){let t=TextureLayer.selected?.texture??Texture.all.find(a=>a.selected)??Texture.getDefault(),e=new x(t.layers_enabled?t.layers:[t],t.uuid),n=e.decodeMer(),r=[l.metalness,l.emissive,l.roughness];Undo.initEdit({textures:[t]}),t.activateLayers(!0),r.forEach(a=>{let s=a.id,i=n[s];if(!i){Blockbench.showStatusMessage(`Failed to decode ${a.label} channel`,3e3);return}let o=new TextureLayer({name:`${t?.name}_${s}`,data_url:i.toDataURL()},t);e.saveTexture(a,o),o.addForEditing()}),Undo.finishEdit("Decode MER")}}),k=new Action(`${c}_create_texture_set`,{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){ue()},condition:{formats:["bedrock"],project:!0}}),N=new Action(`${c}_create_material_texture`,{icon:"stacks",name:"Create Material Texture",description:"Creates a new texture for a PBR material",click(){if(!Project)return;let t=new Texture({name:"New Material",saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}),e=ae(new THREE.Color(8421504));e&&(t.fromDataURL(e).add().select(),Object.keys(l).forEach(n=>{let r=l[n],a=new TextureLayer({name:r.label,visible:!0},t);a.setSize(Project.texture_width??t.width,Project.texture_height??t.height);let s=ae(r.default??new THREE.Color(0),a.canvas);s&&a.texture.fromDataURL(s),a.extend({channel:r.id}),a.addForEditing()}))}}),Object.entries(l).forEach(([t,e])=>{V[t]=new Action(`${c}_assign_channel_${t}`,{icon:e.icon??"tv_options_edit_channels",name:`Assign to ${e.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${e.label} channel`,category:"textures",condition:()=>Modes.paint&&(TextureLayer.selected||Project&&Project.selected_texture!==null),click(n){let r=TextureLayer.selected??(Project?Project.selected_texture:null);if(!r||!Project)return;Undo.initEdit({layers:[r]}),r.extend({channel:e.id});let a=r instanceof TextureLayer?r.texture:r;a.updateChangesAfterEdit(),Project.pbr_materials[a.uuid]||(Project.pbr_materials[a.uuid]={}),Object.entries(Project.pbr_materials[a.uuid]).forEach(([s,i])=>{i===r.uuid&&(delete Project.pbr_materials[a.uuid][s],r.channel=C)}),Project.pbr_materials[a.uuid][t]=r.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${r.name}" to ${e.label} channel`,2e3),P()}})}),D=new Action(`${c}_unassign_channel`,{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",condition:()=>{if(!Modes.paint)return!1;if(TextureLayer.selected)return TextureLayer.selected.channel!==C||!TextureLayer.selected.channel;if(!Project)return!1;let t=Project.selected_texture;return t!==null&&(t.channel!==C||!t.channel)},click(){let t=TextureLayer.selected??(Project?Project.selected_texture:null);if(!t||!Project)return;Undo.initEdit({layers:[t]});let e=t instanceof TextureLayer?t.texture:t,n=t.channel;Project.pbr_materials[e.uuid]={},t.channel=C,e.updateChangesAfterEdit(),Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${t.name}" from ${n} channel`,2e3),P()}}),M=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",default:!1,click(){},onChange(t){if(t){P(),de(),Blockbench.showQuickMessage("PBR Preview is now enabled");return}ce(),oe(),Blockbench.showQuickMessage("PBR Preview is now disabled")}}),$=new Toggle(`${c}_correct_lights`,{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",default:!1,onChange(t){Preview.all.forEach(e=>{e.renderer.physicallyCorrectLights=t}),Preview.selected.renderer.physicallyCorrectLights=t,Blockbench.showQuickMessage(`Physically corrected lighting is now ${t?"enabled":"disabled"}`,2e3),t&&M.set(!0),P()},click(){}}),U=new NumSlider("slider_brush_metalness",{category:"paint",name:"Metalness",description:"Adjust the metalness of the brush",settings:{min:0,max:1,step:.01,default:0},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:e})=>e===l.metalness.id)!==void 0:!1}}),O=new NumSlider("slider_brush_roughness",{category:"paint",name:"Roughness",description:"Adjust the roughness of the brush",settings:{min:0,max:1,step:.01,default:1},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:e})=>e===l.roughness.id)!==void 0:!1}}),F=new ColorPicker("brush_emissive_color",{category:"paint",name:"Emissive",description:"Adjust the emissive color of the brush",value:"#000000",condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:e})=>e===l.emissive.id)!==void 0:!1}}),G=new NumSlider("slider_brush_height",{category:"paint",name:"Height",description:"Adjust the height of the brush",settings:{min:0,max:1,step:.01,default:.5},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:e})=>e===l.height.id)!==void 0:!1}}),I=new Tool("material_brush",{name:"Material Brush",description:"Paints across multiple texture layers",icon:"view_in_ar",paintTool:!0,cursor:"cell",condition:()=>Modes.paint&&!!Project&&Project.selected_texture&&Project.selected_texture.layers_enabled,brush:{blend_modes:!1,shapes:!0,size:!0,softness:!0,opacity:!0,offset_even_radius:!0,floor_coordinates:!0,changePixel(t,e,n,r,{size:a,softness:s,texture:i}){let o=E.fromSettings(),h=Object.keys(o.colors),m=n;return i.layers.forEach(d=>{if(!d.visible||!h.includes(d.channel))return;let p=o.getChannel(d.channel);p&&(d.ctx.fillStyle=p.getStyle(),d.ctx.fillRect(a*t,a*e,a,a),d.selected&&(m={r:p.r*255,g:p.g*255,b:p.b*255,a:r*255}))}),m}},onCanvasClick(t){Painter.startPaintToolCanvas(t,t.event)},onSelect(){P()},click(){P()}}),H=new Menu(`${c}_channel_menu`,[...Object.keys(l).map(t=>`${c}_assign_channel_${t}`),`${c}_unassign_channel`],{onOpen(){P()}}),Q=new Action("pbr_channel_menu",{name:"Assign to PBR Channel",icon:"texture",click(t){H.open(t)},children:[...Object.values(V),D]}),W=new Action(`${c}_show_channel_menu`,{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:()=>Modes.paint&&(TextureLayer.selected||Project&&Project.selected_texture!==null),click(t){H.open(t)}}),X=new Panel(`${c}_display_settings`,{name:"PBR Settings",id:`${c}_display_settings_panel`,icon:"display_settings",toolbars:[new Toolbar(`${c}_controls_toolbar`,{id:`${c}_controls_toolbar`,children:["toggle_pbr",`${c}_correct_lights`,`${c}_show_channel_menu`,`${c}_create_material_texture`],name:"PBR"}),new Toolbar(`${c}_display_settings_toolbar`,{id:`${c}_display_settings_toolbar`,children:["display_settings_tone_mapping","display_settings_exposure"],name:"Display Settings"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"color"}),te=new Panel(`${c}_material_brush_panel`,{name:"Material Brush",id:`${c}_material_brush_panel`,icon:"view_in_ar",toolbars:[new Toolbar(`${c}_material_brush_toolbar`,{id:`${c}_material_brush_toolbar`,children:["material_brush","slider_brush_metalness","slider_brush_roughness","brush_emissive_color","slider_brush_height"],name:"Material Brush"})],display_condition:{modes:["paint"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"right",default_position:{slot:"right_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"color",insert_before:"outliner"}),MenuBar.addAction(A,"file.export"),MenuBar.addAction(B,"tools"),MenuBar.addAction(L,"tools"),MenuBar.addAction(k,"file.export"),MenuBar.addAction(M,"view"),MenuBar.addAction($,"preview"),MenuBar.addAction(N,"tools"),MenuBar.addAction(I,"tools.0"),MenuBar.addAction(Q,"image.0")},me=()=>{Object.entries(V).forEach(([t,e])=>{e.delete()}),MenuBar.removeAction(`file.export.${c}_create_mer`),MenuBar.removeAction(`file.export.${c}_create_texture_set`),MenuBar.removeAction(`tools.${c}_generate_normal`),oe(),X?.delete(),y?.delete(),N?.delete(),A?.delete(),B?.delete(),M?.delete(),L?.delete(),k?.delete(),q?.delete(),K?.delete(),W?.delete(),S?.delete(),j?.delete(),$?.delete(),D?.delete(),Z?.delete(),Y?.delete(),ee?.delete(),I?.delete(),te?.delete(),ie?.delete(),U?.delete(),O?.delete(),F?.delete(),G?.delete(),Q?.delete()};BBPlugin.register(c,{version:le,title:"PBR Features",author:"Jason J. Gardner",description:"Create RTX/Deferred Rendering textures in Blockbench. Adds support for previewing PBR materials and exporting them in Minecraft-compatible formats.",tags:["PBR","RTX","Deferred Rendering"],icon:"icon.png",variant:"both",await_loading:!0,new_repository_format:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.1",onload:he,onunload:me})})();})();
