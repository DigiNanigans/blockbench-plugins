"use strict";(()=>{var b=THREE,W=Vue;var N="_NONE_",u={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new b.Color(16777215)},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new b.Color(0)},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new b.Color(0)},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new b.Color(16777215)},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new b.Color(16777215)},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new b.Color("rgb(128, 128, 255)")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new b.Color(16777215)}},s={},C=[],L=[];var K=[...Object.keys(u).map(t=>u[t].id),N];C.push(()=>{s.channelProp=new Property(TextureLayer,"enum","channel",{default:N,values:K,label:"PBR Channel",exposed:!1}),s.textureChannelProp=new Property(Texture,"enum","channel",{default:N,values:K,label:"PBR Channel",exposed:!1}),s.pbrMaterialsProp=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),s.projectMaterialsProp=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),s.projectPbrModeProp=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!1,values:[],label:"PBR Mode"})});var Le=(t=!0)=>{let a=Project?Project.textures??Texture.all:Texture.all;return t?a.filter(e=>e.layers_enabled&&e.layers.length>0).flatMap(e=>e.layers):a},D=class t{constructor(a,e){this._scope=a??Le(),this._materialUuid=e}merToCanvas(){let a=this.getTexture(u.emissive),e=this.getTexture(u.roughness),r=this.getTexture(u.metalness);if(!a&&!e&&!r){let{metalness:n,emissive:o,roughness:c}=this.decodeMer();n&&(r=t.makePixelatedCanvas(n)),o&&(a=t.makePixelatedCanvas(o)),c&&(e=t.makePixelatedCanvas(c))}return{emissiveMap:a,roughnessMap:e,metalnessMap:r}}getMaterial(a={}){let{emissiveMap:e,roughnessMap:r,metalnessMap:n}=Format.id.startsWith("bedrock")?this.merToCanvas():{emissiveMap:this.getTexture(u.emissive),roughnessMap:this.getTexture(u.roughness),metalnessMap:this.getTexture(u.metalness)},o=this.getTexture(u.normal);return new b.MeshStandardMaterial({map:this.getTexture(u.albedo)??t.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(c=>c.selected)?.canvas??Texture.getDefault().canvas),aoMap:this.getTexture(u.ao),bumpMap:this.getTexture(u.height),normalMap:o,normalScale:new b.Vector2(1,1),metalnessMap:n,metalness:n?1:0,roughnessMap:r,roughness:1,emissiveMap:e,emissiveIntensity:e?1:0,emissive:e?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.95,alphaTest:.1,transparent:!0,...a})}saveTexture(a,e){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][a.id]=e.uuid,e.extend({channel:a.id}))}findTexture(a,e=!0){if(!Project)return null;let r=this._scope.find(l=>l.channel&&(l.channel===a||l.channel===a.id));if(r)return r;let n=typeof a=="string"?a:a.id;Project.pbr_materials=Project.pbr_materials??{};let o=Project.pbr_materials[this._materialUuid];if(!o&&e&&n!==N){let l=new RegExp(`_*${n}(.[^.]+)?$`,"i");return this._scope.find(h=>l.test(h.name))??null}let c=o?.[n];return c?this._scope.find(l=>l.uuid===c)??null:null}static makePixelatedCanvas(a){let e=new b.CanvasTexture(a,void 0,void 0,void 0,b.NearestFilter,b.NearestFilter);return e.needsUpdate=!0,e}getTexture(a){let e=this.findTexture(a);return e?t.makePixelatedCanvas(e.canvas):null}static extractChannel(a,e){let r=a.canvas,{width:n,height:o}=r,c=r.getContext("2d");if(!c||!n||!o)return null;let l=document.createElement("canvas");l.width=n,l.height=o;let h=l.getContext("2d");if(!h)return null;let x={r:0,g:1,b:2,a:3}[e],{data:g}=c.getImageData(0,0,n,o),m=new Uint8ClampedArray(n*o*4);for(let p=0;p<g.length;p+=4){let f=g[p+x];m[p]=f,m[p+1]=f,m[p+2]=f,m[p+3]=255}let _=new ImageData(m,n,o);return h.putImageData(_,0,0),l}decodeMer(a=1){let e=this.findTexture("mer",!0);if(!e)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let r=t.extractChannel(e,"r"),n=t.extractChannel(e,"g"),o=t.extractChannel(e,"b"),c=t.extractChannel(e,"a"),l=document.createElement("canvas");l.width=e.img.width??16,l.height=e.img.height??16;let h=this.findTexture(u.albedo);h&&(l.width=h.img.width??16,l.height=h.img.height??16);let x=l.getContext("2d"),g=n?.getContext("2d"),m=h?.canvas?.getContext("2d");if(!x||!m||!g)return{metalness:r,emissive:n,roughness:o,sss:c};let _=m.getImageData(0,0,l.width,l.height),p=g.getImageData(0,0,l.width,l.height),f=new Uint8ClampedArray(l.width*l.height*4);for(let i=0;i<_.data.length;i+=4){if(p.data[i]>a){f[i]=_.data[i],f[i+1]=_.data[i+1],f[i+2]=_.data[i+2],f[i+3]=255;continue}f[i]=0,f[i+1]=0,f[i+2]=0,f[i+3]=255}return x.putImageData(new ImageData(f,l.width,l.height),0,0),{metalness:r,emissive:l,emissiveLevel:n,roughness:o,sss:c}}createMer(a=!1){let e=this.findTexture(u.metalness,a),r=this.findTexture(u.emissive,a),n=this.findTexture(u.roughness,a),o=this.findTexture("sss",!1),c=Math.max(e?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),l=Math.max(e?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),h=document.createElement("canvas");h.width=c,h.height=l;let x=h.getContext("2d");if(!x)return null;let g=e?.img?t.extractChannel(e,"r"):null,m=r?.img?t.extractChannel(r,"g"):null,_=n?.img?t.extractChannel(n,"b"):null,p=o&&o?.img?t.extractChannel(o,"a"):null,f=g?.getContext("2d")?.getImageData(0,0,c,l)??new ImageData(c,l),i=m?.getContext("2d")?.getImageData(0,0,c,l)??new ImageData(c,l),d=_?.getContext("2d")?.getImageData(0,0,c,l)??new ImageData(c,l),v=p?.getContext("2d")?.getImageData(0,0,c,l)??new ImageData(new Uint8ClampedArray(c*l*4).fill(255),c,l),y=new Uint8ClampedArray(c*l*4);for(let M=0;M<y.length;M+=4)y[M]=f.data[M],y[M+1]=i.data[M],y[M+2]=d.data[M],y[M+3]=v.data[M];return x.putImageData(new ImageData(y,c,l),0,0),h}createLabPbrOutput(a=!0){let e=this.findTexture(u.metalness,a),r=this.findTexture(u.emissive,a),n=this.findTexture(u.roughness,a),o=this.findTexture(u.normal,a),c=this.findTexture(u.height,a),l=this.findTexture(u.ao,!1),h=this.findTexture("sss",!0),x=this.findTexture("porosity",!0),g=Math.max(e?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),m=Math.max(e?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),_=document.createElement("canvas");_.width=g,_.height=m;let p=_.getContext("2d"),f=document.createElement("canvas");f.width=g,f.height=m;let i=f.getContext("2d");if(!p||!i)return null;let d=new Uint8ClampedArray(g*m*4),v=new Uint8ClampedArray(g*m*4),y=e?.canvas,M=r?.canvas,k=n?.canvas,w=h?.canvas,E=x?.canvas,T=y?.getContext("2d"),j=M?.getContext("2d"),ue=k?.getContext("2d"),me=w?.getContext("2d"),de=E?.getContext("2d"),he=T?.getImageData(0,0,g,m),I=j?.getImageData(0,0,g,m),V=ue?.getImageData(0,0,g,m),pe=me?.getImageData(0,0,g,m),ge=de?.getImageData(0,0,g,m);for(let P=0;P<d.length;P+=4){let q=V?1-Math.sqrt(V.data[P]/255):0,Ce=Math.min(229,Math.max(0,Math.round((he?.data[P]??q)*229))),Te=ge?.data[P],Pe=pe?.data[P];if(d[P]=q*255,d[P+1]=Ce,d[P+2]=Pe??Te??0,!I){d[P+3]=255;continue}let Ee=Math.round((I?.data[P]+I?.data[P+1]+I?.data[P+2])/3);d[P+3]=Ee||255}p.putImageData(new ImageData(d,g,m),0,0);let fe=o?.canvas,xe=l?.canvas,be=c?.canvas,ve=fe?.getContext("2d"),_e=xe?.getContext("2d"),ye=be?.getContext("2d"),J=ve?.getImageData(0,0,g,m),Me=_e?.getImageData(0,0,g,m),we=ye?.getImageData(0,0,g,m);for(let P=0;P<v.length;P+=4)v[P]=J?.data[P]??0,v[P+1]=J?.data[P+1]??0,v[P+2]=Me?.data[P+2]??255,v[P+3]=we?.data[P+3]||255;return i.putImageData(new ImageData(v,g,m),0,0),{specular:_,normalMap:f}}decodeLabPbrNormal(a){let e=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let o=document.createElement("canvas");o.width=e,o.height=r;let c=document.createElement("canvas");c.width=e,c.height=r;let l=document.createElement("canvas");l.width=e,l.height=r;let h=o.getContext("2d"),x=c.getContext("2d"),g=l.getContext("2d"),{data:m}=n.getImageData(0,0,e,r);if(!m||!h||!x||!g)return{};let _=new Uint8ClampedArray(e*r*4),p=new Uint8ClampedArray(e*r*4),f=new Uint8ClampedArray(e*r*4);for(let i=0;i<m.length;i+=4){let d=i+1,v=i+2,y=i+3;_[i]=m[v],_[d]=m[v],_[v]=m[v],_[y]=255,p[i]=m[i],p[d]=m[d],p[v]=255,p[y]=255,f[i]=m[y],f[d]=m[y],f[v]=m[y],f[y]=255}return h.putImageData(new ImageData(_,e,r),0,0),x.putImageData(new ImageData(p,e,r),0,0),g.putImageData(new ImageData(f,e,r),0,0),{ao:o,normal:c,heightmap:l}}decodeLabPbrSpecular(a){let e=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let o=document.createElement("canvas");o.width=e,o.height=r;let c=document.createElement("canvas");c.width=e,c.height=r;let l=document.createElement("canvas");l.width=e,l.height=r;let h=document.createElement("canvas");h.width=e,h.height=r;let x=document.createElement("canvas");x.width=e,x.height=r;let g=o.getContext("2d"),m=c.getContext("2d"),_=l.getContext("2d"),p=h.getContext("2d"),f=x.getContext("2d"),{data:i}=n.getImageData(0,0,e,r);if(!i||!g||!m||!_||!p||!f)return{};let d=new Uint8ClampedArray(e*r*4),v=new Uint8ClampedArray(e*r*4),y=new Uint8ClampedArray(e*r*4),M=new Uint8ClampedArray(e*r*4),k=new Uint8ClampedArray(e*r*4);for(let w=0;w<i.length;w+=4){let E=w+1,T=w+2,j=w+3;y[w]=255-i[w],y[E]=255-i[w],y[T]=255-i[w],y[j]=255,d[w]=i[E],d[E]=i[E],d[T]=i[E],d[j]=255,v[w]=i[j],v[E]=i[j],v[T]=i[j],v[j]=255,M[w]=0,M[E]=0,M[T]=0,M[j]=255,k[w]=i[T],k[E]=i[T],k[T]=i[T],k[j]=255,i[T]<65&&(M[w]=i[T],M[E]=i[T],M[T]=i[T],M[j]=255,k[w]=0,k[E]=0,k[T]=0,k[j]=255)}return g.putImageData(new ImageData(d,e,r),0,0),m.putImageData(new ImageData(v,e,r),0,0),_.putImageData(new ImageData(y,e,r),0,0),p.putImageData(new ImageData(M,e,r),0,0),f.putImageData(new ImageData(k,e,r),0,0),{metalness:o,emissive:c,roughness:l,sss:h,porosity:x}}createTexturesFromSpecular(a){let e=this.decodeLabPbrSpecular(a);return Object.entries(e).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),e}createTexturesFromNormal(a){let e=this.decodeLabPbrNormal(a);return Object.entries(e).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),e}};var R=class{constructor({lightHeight:a=.66,ambientLight:e=[.1,.1,.1],minLightIntensity:r=0,lightDiffuse:n=[1,1,1]}={}){this.lightHeight=a,this.ambientLight=e,this.minLightIntensity=r,this.lightDiffuse=n}bake(a,e,r){let n=e instanceof HTMLCanvasElement?e:this.createCanvas(e.width,e.height),o=r instanceof HTMLCanvasElement?r:this.createCanvas(r.width,r.height),c=n.getContext("2d"),l=o.getContext("2d");c.drawImage(e,0,0),l.drawImage(r,0,0);let h=c.getImageData(0,0,e.width,e.height),x=l.getImageData(0,0,r.width,r.height),g=[],m=[];for(let p=0;p<x.width;++p){m[p]=[];for(let f=0;f<x.height;++f){let i=(p+f*x.width)*4,d=[(x.data[i+0]/255-.5)*2,(x.data[i+1]/255-.5)*2,(x.data[i+2]/255-.5)*2],v=Math.sqrt(d[0]**2+d[1]**2+d[2]**2);m[p][f]=[d[0]/v,d[1]/v,d[2]/v]}}let _=p=>{let f=this.createCanvas(e.width,e.height),i=f.getContext("2d"),d=i.getImageData(0,0,f.width,f.height),v=[Math.cos(p),Math.sin(p),this.lightHeight];for(let y=0;y<x.width;++y)for(let M=0;M<x.height;++M){let k=m[y][M],w=(y+M*x.width)*4,E=[h.data[w+0]/255,h.data[w+1]/255,h.data[w+2]/255,h.data[w+3]],T=k[0]*v[0]+k[1]*v[1]+k[2]*v[2];T=Math.min(1,Math.max(this.minLightIntensity,T));let j=[T*E[0]*this.lightDiffuse[0]+this.ambientLight[0],T*E[1]*this.lightDiffuse[1]+this.ambientLight[1],T*E[2]*this.lightDiffuse[2]+this.ambientLight[2],E[3]];d.data[w+0]=Math.floor(j[0]*255),d.data[w+1]=Math.floor(j[1]*255),d.data[w+2]=Math.floor(j[2]*255),d.data[w+3]=j[3]}return i.putImageData(d,0,0),f};for(let p=0;p<a;++p){let f=Math.PI*2/a*p;g.push(_(f))}return g}createCanvas(a,e){let r=document.createElement("canvas");return r.width=a,r.height=e,r}};var X=(t,a=8,e=!1)=>{if(!Project)return;let r=Project.selected_texture??Texture.getDefault(),n=new D(r.layers_enabled?r.layers:Project.textures,r.uuid),o=n.findTexture(u.albedo);if(!o){Blockbench.showStatusMessage("Can not bake without a base color assigned.",3e3);return}let c=n.findTexture(u.normal);if(!c){Blockbench.showStatusMessage("Can not bake without a normal map assigned.",3e3);return}let h=new R(t).bake(a,o.canvas,c.canvas),x=new Texture({name:`${o.name}_baked`,saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}).fromDataURL(h[0].toDataURL()),g=e?m=>{let _=n.findTexture(u.emissive);if(!_)return m;let p=_.canvas;if(!p.getContext("2d"))return m;let i=Math.max(m.width,p.width,Project?Project.texture_width:16),d=Math.max(m.height,p.height,Project?Project.texture_height:16),v=document.createElement("canvas");v.width=i,v.height=d;let y=v.getContext("2d");return y?(y.drawImage(m,0,0),y.globalCompositeOperation="screen",y.drawImage(p,0,0),v):m}:m=>m;h.forEach((m,_)=>{new TextureLayer({name:`baked_${_+1}`,data_url:g(m).toDataURL()},x).addForEditing()}),x.add().select(),Blockbench.showQuickMessage("Textures baked \u{1F950}",2e3)};C.push(()=>{s.bakeTexturesDialog=new Dialog("bake_textures",{id:"bake_textures",title:"Bake Textures",buttons:["Bake","Cancel"],form:{ambientLight:{type:"color",label:"Ambient Light",value:"#1f1f1f"},lightDiffuse:{type:"color",label:"Light Diffuse",value:"#ffffff"},lightHeight:{type:"range",label:"Light Height",min:0,max:1,step:.01,value:.66},minLightIntensity:{type:"range",label:"Minimum Light Intensity",min:0,max:1,step:.01,value:0},directions:{type:"number",label:"Directions",value:8,min:1,max:360,step:1},blendEmissive:{type:"checkbox",label:"Blend Emissive",value:!1}},onConfirm(t){let a=new b.Color(t.ambientLight.toString()),e=new b.Color(t.lightDiffuse.toString());X({ambientLight:[a.r,a.g,a.b],lightDiffuse:[e.r,e.g,e.b],lightHeight:Number(t.lightHeight),minLightIntensity:Number(t.minLightIntensity)},t.directions??8,t.blendEmissive??!1)}}),s.bakeTexturesAction=new Action("bake_textures",{icon:"cake",name:"Bake Textures",description:"Bakes textures for the selected PBR material",click(){s.bakeTexturesDialog?.show()}}),MenuBar.addAction(s.bakeTexturesAction,"tools")});L.push(()=>{MenuBar.removeAction("tools.bake_textures")});function S(){return Texture.selected?Texture.selected:TextureLayer.selected?TextureLayer.selected.texture:Project?Project.selected_texture?Project.selected_texture:Project.textures.find(t=>t.selected)??null:Texture.all.find(t=>t.selected)??Texture.getDefault()}function H(){return TextureLayer.selected?TextureLayer.selected:Texture.selected?.selected_layer?Texture.selected.selected_layer:Project.selected_texture!==null&&Project.selected_texture?.layers_enabled===!0?Project.selected_texture.layers.find(t=>t.selected)??Project.selected_texture.layers[0]:S()?.getActiveLayer()??null}function Y(){return Project?Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName():pathToName(S()?.name??"texture")}function Z(t,a){let e;return function(...r){let n=()=>{e=void 0,t.apply(this,r)};clearTimeout(e),e=setTimeout(n,a)}}function ee(t,a){let e=t.getTexture();if(!e||!Project)return null;let r=Project.materials[e.uuid];r.isShaderMaterial&&!Project.bb_materials[e.uuid]&&(Project.bb_materials[e.uuid]=r);let n=new D(e.layers_enabled?e.layers.filter(o=>o.visible)??null:Project.textures,e.uuid).getMaterial(a);return n.side=Canvas.getRenderSide(e),Project.materials[e.uuid]=b.ShaderMaterial.prototype.copy.call(n,r),e}function te(t){return Object.values(t).filter(a=>a?(Canvas.updateAllFaces(a),!0):!1).length>0}function je(t,a){let e={};return t.forAllFaces(r=>{let n=ee(r,a);n&&(e[n.uuid]=n)}),te(e)}function De(t,a){let e={};return Object.keys(t.faces).forEach(r=>{let n=t.faces[r],o=ee(n,a);o&&(e[o.uuid]=o)}),te(e)}var A=(t={})=>{Project&&(Project.pbr_active=Texture.all.length>0&&Project.elements.map(a=>a instanceof Mesh&&je(a,t)||a instanceof Cube&&De(a,t)).filter(Boolean).length>0)},B=(t=100)=>Z(A,t);var Q={},O={};C.push(()=>{Object.entries(u).forEach(([t,a])=>{Q[t]=new Action(`assign_channel_${t}`,{icon:a.icon??"tv_options_edit_channels",name:`Assign to ${a.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${a.label} channel`,category:"textures",condition:{selected:{texture:!0}},click(){let e=TextureLayer.selected??(Project?Project.selected_texture:null);if(!e)return;Undo.initEdit({layers:[e]}),e.extend({channel:a.id});let r=e instanceof TextureLayer?e.texture:e;r.updateChangesAfterEdit(),Project.pbr_materials[r.uuid]||(Project.pbr_materials[r.uuid]={}),Object.entries(Project.pbr_materials[r.uuid]).forEach(([n,o])=>{o===e.uuid&&(delete Project.pbr_materials[r.uuid][n],e.channel=N)}),r.uuid===e.uuid&&(Project.pbr_materials[r.uuid]={}),Project.pbr_materials[r.uuid][t]=e.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${e.name}" to ${a.label} channel`,2e3),A()}}),O[t]=new Action(`select_channel_${t}`,{icon:a.icon??"tv_options_edit_channels",name:a.label??t,description:`Select the ${a.label} channel`,condition:{project:!0,selected:{texture:!0},modes:["paint"],method(){let e=S();return(e?.layers_enabled?e.layers:Texture.all).some(n=>n.channel===t)}},click(){let e=Texture.selected?.layers_enabled?Texture.selected.layers:Texture.all;if(!e||!e.length)return;let r=e.find(n=>n.channel===t);r&&(r.select(),r.scrollTo())}}),O[t].addLabel(!0,()=>a.label??t)})});L.push(()=>{[...Object.values(Q),...Object.values(O)].forEach(a=>{a.delete()})});C.push(()=>{s.unassignChannel=new Action("unassign_channel",{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",condition:{selected:{texture:!0},method(){let t=TextureLayer.selected??(Project?Project.selected_texture:null);return t?.channel&&t.channel!==N}},click(){let t=TextureLayer.selected??(Project?Project.selected_texture:null);if(!t)return;Undo.initEdit({layers:[t]});let a=t instanceof TextureLayer?t.texture:t,e=t.channel;Project.pbr_materials[a.uuid]={},t.channel=N,a.updateChangesAfterEdit(),Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${t.name}" from ${e} channel`,2e3),B()}}),s.channelMenu=new Menu("channel_menu",[...Object.keys(u).map(t=>`assign_channel_${t}`),"unassign_channel"],{onOpen(){B()}}),s.channelSelectionMenu=new Menu("channel_selection_menu",Object.keys(u).map(t=>`select_channel_${t}`)),s.openChannelMenu=new Action("pbr_channel_menu",{name:"Assign to PBR Channel",icon:"texture",click(t){s.channelMenu?.open(t)},children:[...Object.values(Q),s.unassignChannel]}),s.showChannelMenu=new Action("show_channel_menu",{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:{modes:["paint"],selected:{texture:!0}},click(t){s.channelMenu?.open(t)}}),s.showChannelSelectionMenu=new Action("show_channel_select_menu",{icon:"tv_options_edit_channels",name:"Select PBR Channel",description:"Select a channel to view",category:"textures",condition:{modes:["paint"],selected:{texture:!0}},click(t){s.channelSelectionMenu?.open(t)}}),s.openChannelMenu&&(MenuBar.addAction(s.openChannelMenu,"image.0"),Texture.prototype.menu.addAction(s.openChannelMenu,"0"),TextureLayer.prototype.menu.addAction(s.openChannelMenu,"0")),Toolbars.layers.add(s.showChannelMenu,1)});L.push(()=>{MenuBar.removeAction("image.pbr_channel_menu"),Texture.prototype.menu.removeAction("pbr_channel_menu"),TextureLayer.prototype.menu.removeAction("pbr_channel_menu"),Toolbars.layers.remove(s.showChannelMenu)});function G(t,a=!1){let e=t.canvas.getContext("2d");if(!e)return null;let r=Math.max(t.img.width??t.canvas.width,Project?Project.texture_width:0,16),n=Math.max(t.img.height??t.canvas.height,Project?Project.texture_height:0,16),{data:o}=e.getImageData(0,0,r,n),c=document.createElement("canvas"),l=c.getContext("2d");if(!l)return null;let h=(i,d)=>{let v=(i+d*r)*4;return o[v]/255};c.width=r,c.height=n,l.drawImage(t.img,0,0,r,n);let x=l.getImageData(0,0,r,n),g=x.data,m=i=>{let d=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);return[i[0]/d,i[1]/d,i[2]/d]};for(let i=0;i<n;i++)for(let d=0;d<r;d++){let v=h(Math.max(d-1,0),i),y=h(Math.min(d+1,r-1),i),M=h(d,Math.max(i-1,0)),k=h(d,Math.min(i+1,n-1)),w=y-v,E=k-M,T=m([-w,-E,1]),j=(i*r+d)*4;g[j]=(T[0]+1)/2*255,g[j+1]=(T[1]+1)/2*255,g[j+2]=(T[2]+1)/2*255,g[j+3]=a?h(d,i)*255:255}l.putImageData(x,0,0);let _=c.toDataURL(),p=`${t.name.replace(/_height(map)?/i,"")}_normal`;if(t instanceof TextureLayer){let i=new TextureLayer({name:p,data_url:_,visible:!0},t.texture);return i.addForEditing(),i}let f=new Texture({name:p,saved:!1,particle:!1}).fromDataURL(_);return Project&&f.add(),f}function ae(t){let a=t.canvas.getContext("2d");if(!a)return null;let e=Math.max(t.img.width??t.canvas.width,Project?Project.texture_width:0,16),r=Math.max(t.img.height??t.canvas.height,Project?Project.texture_height:0,16),{data:n}=a.getImageData(0,0,e,r),o=document.createElement("canvas"),c=o.getContext("2d");if(!c)return null;let l=(p,f)=>{let i=(p+f*e)*4;return n[i]/255};o.width=e,o.height=r,c.drawImage(t.img,0,0,e,r);let h=c.getImageData(0,0,e,r),x=h.data;for(let p=0;p<r;p++)for(let f=0;f<e;f++){let i=l(Math.max(f-1,0),p),d=l(Math.min(f+1,e-1),p),v=l(f,Math.max(p-1,0)),y=l(f,Math.min(p+1,r-1)),M=d-i,k=y-v,w=Math.sqrt(M*M+k*k)*255,E=(p*e+f)*4;x[E]=w,x[E+1]=w,x[E+2]=w,x[E+3]=255}c.putImageData(h,0,0);let g=o.toDataURL(),m=`${t.name.replace(/_height(map)?/i,"")}_ao`;if(t instanceof TextureLayer){let p=new TextureLayer({name:m,data_url:g,visible:!0},t.texture);return p.addForEditing(),p}let _=new Texture({name:m,saved:!1,particle:!1,keep_size:!1}).fromDataURL(g);return Project&&_.add(),_}C.push(()=>{s.generateNormal=new Action("generate_normal",{icon:u.normal.icon??"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(H()??S())!==null,click(t){let a=H()??S()??Texture.getDefault();if(!a)return;let e=G(a);if(!e){Blockbench.showQuickMessage("Failed to generate normal map",2e3);return}e.select(t),new D(a instanceof Texture&&a.layers_enabled?a.layers:null,a.uuid).saveTexture(u.normal,e),Blockbench.showQuickMessage("Normal map generated",2e3)}}),s.generateAo=new Action("generate_ao",{icon:u.ao.icon??"motion_mode",name:"Generate Ambient Occlusion Map",description:"Generates an ambient occlusion map from the height map",condition:{selected:{texture:!0},project:!0},click(){let t=H()??S()??Texture.getDefault();if(!t)return;let a=new D(t instanceof Texture&&t.layers_enabled?t.layers:null,t.uuid),e=a.findTexture(u.normal)??G(t);if(!e){Blockbench.showQuickMessage("Unable to generate ambient occlusion map without a normal map",2e3);return}let r=ae(e);if(r){a.saveTexture(u.ao,r),r.select(),Blockbench.showQuickMessage("Ambient occlusion map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate ambient occlusion map",2e3)}}),MenuBar.addAction(s.generateNormal,"tools"),MenuBar.addAction(s.generateAo,"tools")});L.push(()=>{MenuBar.removeAction("tools.generate_normal")});var re=(t,a)=>{let e=a??document.createElement("canvas"),r=e.getContext("2d");if(!r)return null;let n=Math.max(Project?Project.texture_width:16,16),o=Math.max(Project?Project.texture_height:16,16);return e.width=n,e.height=o,r.fillStyle=`rgb(${t.r*255}, ${t.g*255}, ${t.b*255})`,r.fillRect(0,0,n,o),e.toDataURL()};C.push(()=>{s.createMaterialTexture=new Action("create_material_texture",{icon:"stacks",name:"Create Material Texture",description:"Creates a new texture for a PBR material",condition:{modes:["edit","paint"],project:!0},click(){if(!Project)return;let t={...u},a=new Texture({name:"New Material",saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}),e=Texture.all.filter(o=>o.selected||o.multi_selected)??Texture.all,r=Texture.selected?new D(e,Texture.selected.uuid):null;try{let o=r?.findTexture(u.albedo,!0)?.canvas.toDataURL()??Texture.selected?.canvas.toDataURL()??re(new b.Color(8421504),a.canvas);if(!o)return;a.fromDataURL(o);let c=new TextureLayer({name:t.albedo.label,visible:!0,data_url:o},a);c.extend({channel:t.albedo.id}),c.addForEditing(),c.texture.updateChangesAfterEdit(),delete t.albedo}catch(o){console.warn("Failed to create base color texture",o),Blockbench.showStatusMessage("Failed to create base color texture in new material",3e3)}let n=Object.keys(t).map(o=>{let c=u[o],l=r?.findTexture(c,!0),h=l?l.canvas.toDataURL():re(c.default??new b.Color(0));if(!h)return;let x=new TextureLayer({name:c.label,visible:!0,data_url:h},a);return x.extend({channel:c.id}),x}).filter(Boolean);Undo.initEdit({textures:Texture.all,layers:n}),a.add().select(),n.map(o=>o.addForEditing()),a.updateChangesAfterEdit(),Undo.finishEdit("Create Material Texture")}}),MenuBar.addAction(s.createMaterialTexture,"tools"),Toolbars.texturelist.add(s.createMaterialTexture,3)});L.push(()=>{MenuBar.removeAction("tools.create_material_texture")});var U=(t,a)=>{let e=S()??Texture.getDefault(),r=new D(e.layers_enabled?e.layers:Project?Project.textures:null,e.uuid).createMer(!0);if(!r)throw new Error("Failed to generate MER map from selected texture.");r.toBlob(async n=>{if(!n)throw new Error("Failed to save MER map.");let[o,c]=Project?[t?`${t}_mer`:`${e.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await n.arrayBuffer(),type:"PNG",name:o,extensions:["png"],resource_id:"mer",savetype:"image",startpath:c},a)})};C.push(()=>{s.generateMer=new Action("create_mer",{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",condition:{formats:["bedrock","bedrock_block"],project:!0},click(){try{U()}catch(t){console.error("Failed to export MER map:",t),Blockbench.showStatusMessage("Failed to export MER map",3e3)}}}),s.decodeMer=new Action("decode_mer",{name:"Decode MER",icon:"arrow_split",condition:{formats:["bedrock","bedrock_block"],project:!0,selected:{texture:!0}},children:[{icon:"move_item",name:"Decode MER to Textures",description:"Decodes a MER texture map into metalness, emissive, and roughness channels into separate textures",click(){let t=S()??Texture.getDefault(),a=new D([t],t.uuid),e=a.decodeMer(),r=[u.metalness,u.emissive,u.roughness];Undo.initEdit({textures:[t]}),r.forEach(n=>{let o=n.id,c=e[o];if(!c){Blockbench.showStatusMessage(`Failed to decode ${n.label} channel`,3e3);return}let l=new Texture({name:`${t?.name}_${o}`,keep_size:!1}).fromDataURL(c.toDataURL());l.add(!0),a.saveTexture(n,l)}),Undo.finishEdit("Decode MER to textures")}},{icon:"move_group",name:"Decode MER to Layers",description:"Decodes a MER texture map into metalness, emissive, and roughness channels into material layers",condition:()=>S()?.layers_enabled===!0,click(){let t=TextureLayer.selected?.texture??Texture.all.find(o=>o.selected)??Texture.getDefault(),a=new D(t.layers_enabled?t.layers:[t],t.uuid),e=a.decodeMer(),r=[u.metalness,u.emissive,u.roughness];Undo.initEdit({textures:[t]});let n=t.selected.activateLayers(!0);r.forEach(o=>{let c=o.id,l=e[c];if(!l){Blockbench.showStatusMessage(`Failed to decode ${o.label} channel`,3e3);return}let h=new TextureLayer({name:`${t?.name}_${c}`,data_url:l.toDataURL()},t);a.saveTexture(o,h),h.addForEditing()}),Undo.finishEdit("Decode MER to layers")}}],click(){}}),MenuBar.addAction(s.decodeMer,"tools"),MenuBar.addAction(s.generateMer,"file.export")});L.push(()=>{MenuBar.removeAction("file.export.create_mer"),MenuBar.removeAction("tools.decode_mer")});var ke=()=>{Project&&Project.textures.forEach(t=>{let a=new D(null,t.uuid),e=a.findTexture(u.normal,!1),r=a.findTexture(u.height,!1),n=a.findTexture(u.albedo,!1),o=a.findTexture(u.metalness,!1)?.name,c=a.findTexture(u.emissive,!1)?.name,l=a.findTexture(u.roughness,!1)?.name,h={};return n||(h.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!o&&!c&&!l&&(h.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},h.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},h.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),e&&(h.depthMap={type:"checkbox",label:"Normal Map",value:"normal"}),r&&(h.depthMap={type:"checkbox",label:"Height Map",value:"heightmap"}),e&&r&&(h.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),s.textureSetDialog=new Dialog("texture_set",{id:"texture_set",title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:h,cancelIndex:1,onConfirm(x){let g=Y(),m=o||c||l,_={format_version:"1.16.100","minecraft:texture_set":{color:(n?g:x.baseColor?.toHexString())??g,metalness_emissive_roughness:[x.metalness??0,x.emissive??0,x.roughness??255]}};x.depthMap==="normal"&&e||!r&&e?_["minecraft:texture_set"].normal=`${g}_normal`:(!e||x.depthMap==="heightmap")&&r&&(_["minecraft:texture_set"].heightmap=`${g}_heightmap`);let p=d=>{if(!x.depthMap)return d();let v=x.depthMap==="normal"||x.depthMap&&!r,y=v?e:r;if(!y)return d();Blockbench.export({content:y.canvas.toDataURL()??"",type:"PNG",name:`${g}_${v?"normal":"heightmap"}`,extensions:["png"],resource_id:x.depthMap,startpath:Project.export_path,savetype:"image"},M=>{_["minecraft:texture_set"][v?"normal":"heightmap"]=pathToName(M,!1),d()})},f=d=>{if(!n)return d();Blockbench.export({content:n.canvas.toDataURL(),extensions:["png"],type:"PNG",name:g,startpath:Project.export_path,savetype:"image"},v=>{_["minecraft:texture_set"].color=pathToName(v,!1),d()})},i=()=>p(()=>{f(()=>{Blockbench.export({content:JSON.stringify(_,null,2),type:"JSON",name:`${g}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path,savetype:"text"},()=>{Blockbench.showQuickMessage("Texture set created",2e3),s.textureSetDialog?.hide()})})});if(m){try{U(g,d=>{_["minecraft:texture_set"].metalness_emissive_roughness=pathToName(d,!1),i()})}catch(d){console.warn("Failed to export MER map:",d),Blockbench.showStatusMessage("Failed to export MER map",3e3)}return}i()}}),s.textureSetDialog.show()})};C.push(()=>{s.createTextureSet=new Action("create_texture_set",{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){ke()},condition:{formats:["bedrock","bedrock_block"],project:!0}}),MenuBar.addAction(s.createTextureSet,"file.export")});L.push(()=>{MenuBar.removeAction("file.export.create_texture_set")});C.push(()=>{s.toggleCorrectLights=new Toggle("correct_lights",{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",default:!1,onChange(t){Preview.all.forEach(a=>{a.renderer.physicallyCorrectLights=t}),Preview.selected.renderer.physicallyCorrectLights=t,Blockbench.showQuickMessage(`Physically corrected lighting is now ${t?"enabled":"disabled"}`,2e3),t&&s.togglePbr?.set(!0),A()},click(){}}),MenuBar.addAction(s.toggleCorrectLights,"preview")});L.push(()=>{MenuBar.removeAction("preview.correct_lights")});var $=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(a=>{let r=t.faces[a].getTexture();if(!r)return;let n=Project.bb_materials[r.uuid];n&&(Project.materials[r.uuid]=n)})}),Project.pbr_active=!1,Canvas.updateAll())};var ne=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project","load_undo_save","add_cube"],se=()=>Project&&Project.pbr_active&&A(),Se=()=>{Blockbench.on(ne.join(" "),se)},oe=()=>{ne.forEach(t=>{Blockbench.removeListener(t,se)})};C.push(()=>{s.togglePbr=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",default:!1,click(){},onChange(t){if(t){A(),Se(),Blockbench.showQuickMessage("PBR Preview is now enabled");return}$(),oe(),Blockbench.showQuickMessage("PBR Preview is now disabled")}}),MenuBar.addAction(s.togglePbr,"view")});L.push(()=>{oe(),MenuBar.removeAction("view.toggle_pbr")});var ie=t=>{let a=Math.max(-2,Math.min(2,t));Preview.all.forEach(e=>{e.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMappingExposure=a};C.push(()=>{s.exposureSlider=new NumSlider("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",value:1,icon:"exposure",settings:{min:-2,max:2,step:.01,default:1},onBefore(){Number(s.tonemappingSelect?.get())===b.NoToneMapping&&s.tonemappingSelect.change(b.LinearToneMapping.toString()),s.togglePbr?.set(!0)},onChange(t){ie(Number(t))},onAfter(){B()}}),s.resetExposureButton=new Action("display_settings_reset_exposure",{category:"preview",name:"Reset Exposure",description:"Resets the exposure of the scene",icon:"exposure_plus_1",condition:()=>s.exposureSlider!==void 0&&Number(s.exposureSlider?.get())!==1,click(){ie(1),s.exposureSlider?.setValue(1,!0),B()}}),s.tonemappingSelect=new BarSelect("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:b.NoToneMapping,value:Preview.selected.renderer.toneMapping??b.NoToneMapping,icon:"monochrome_photos",options:{[b.NoToneMapping]:"No Tone Mapping",[b.LinearToneMapping]:"Linear",[b.ReinhardToneMapping]:"Reinhard",[b.CineonToneMapping]:"Cineon",[b.NeutralToneMapping]:"Neutral",[b.ACESFilmicToneMapping]:"ACES"},onChange({value:t}){Preview.selected.renderer.toneMapping=Number(t);let a=1;Preview.selected.renderer.toneMapping===b.NoToneMapping?s.exposureSlider?.setValue(a,!0):a=Number(s.exposureSlider?.get()??1),Preview.all.forEach(e=>{e.renderer.toneMapping=Number(t),e.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMappingExposure=a,Blockbench.showQuickMessage(`Tone mapping set to ${this.getNameFor(t)}`,2e3),s.togglePbr&&!s.togglePbr.value&&s.togglePbr.set(!0),A()}})});var Ae=(t,a="texture")=>{t.toBlob(async e=>{e&&Blockbench.export({content:await e.arrayBuffer(),type:"PNG",name:`${a}_n`,extensions:["png"],resource_id:"normal_map",savetype:"image"})})},Ne=(t,a="texture")=>{t.toBlob(async e=>{e&&Blockbench.export({content:await e.arrayBuffer(),type:"PNG",name:`${a}_s`,extensions:["png"],resource_id:"specular_map",savetype:"image"})})};C.push(()=>{s.generateLabPbr=new Action("generate_lab_pbr",{icon:"experiment",name:"Generate labPBR textures",description:"Generate a specular and normal map in labPBR format for Java shaders",condition:{formats:["java_block"],project:!0},async click(){let t=S();if(!t)return;let e=new D(t.layers_enabled?t.layers:[t],t.uuid).createLabPbrOutput();if(e===null)return;let r=t.name??(Project?Project.getDisplayName():"texture");await Promise.all([Ae(e.normalMap,pathToName(r)),Ne(e.specular,pathToName(r))]),Blockbench.showQuickMessage("Exported labPBR textures")}}),s.decodeLabPbr=new Action("decode_lab_pbr",{icon:"frame_source",name:"Decode labPBR textures",description:"Decodes the selected texture into a specular or normal map in labPBR format",condition:{formats:["java"],project:!0,selected:{texture:!0}},click(){let t=TextureLayer.selected?.texture??Texture.all.find(e=>e.selected)??Texture.getDefault(),a=new D(t.layers_enabled?t.layers:[t],t.uuid);if(pathToName(t.name).endsWith("_n")){a.createTexturesFromNormal(t);return}if(pathToName(t.name).endsWith("_s")){a.createTexturesFromSpecular(t);return}Blockbench.showQuickMessage("Failed to decode labPBR texture")}}),MenuBar.addAction(s.generateLabPbr,"file.export"),MenuBar.addAction(s.decodeLabPbr,"tools")});L.push(()=>{MenuBar.removeAction("file.export.generate_lab_pbr")});var F=class t{constructor({colors:a}){this._colors={...Object.fromEntries(Object.keys(u).map(e=>[e,u[e].default??new b.Color(4294967040)])),...a}}get colors(){return this._colors}set colors(a){this._colors={...this._colors,...a}}toString(){let a=Object.entries(this._colors).map(([e,r])=>[e,r.getHexString()]);return JSON.stringify(a)}getChannel(a){return this._colors[a]}static makeLinearColor(a){let e=Math.min(1,Math.max(0,a));return new b.Color(e,e,e).convertSRGBToLinear()}static fromSettings(){let a="#000000",e=Number(s.brushMetalnessSlider?.get()),r=Number(s.brushRoughnessSlider?.get()??1),n=(s.brushEmissiveColor?.get()??a).toString(),o=Number(s.brushHeightSlider?.get()),c=ColorPanel.get(),l={[u.albedo.id]:new b.Color(c),[u.metalness.id]:t.makeLinearColor(e),[u.roughness.id]:t.makeLinearColor(r),[u.emissive.id]:new b.Color(n??a),[u.height.id]:t.makeLinearColor(o),[u.normal.id]:u.normal.default??new b.Color("#8080ff")};return new t({colors:l})}};var Be=t=>{let a=new b.WebGLRenderer({alpha:!0,antialias:!0}),e=new b.Scene,r=new b.PerspectiveCamera(75,96/96,.1,1e3),n=new b.AmbientLight(16777215,.75);e.add(n);let o=new b.PointLight(16777215,1,100);o.position.set(5,5,5),e.add(o);let c=new b.SphereGeometry(1,32,32),l=new b.MeshStandardMaterial({color:t.albedo,metalness:t.metalness??0,roughness:t.roughness??1,emissive:t.emissive,bumpScale:t.height??0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.5}),h=new b.Mesh(c,l);return e.add(h),r.position.x=0,r.position.y=0,r.position.z=2,a.setSize(96,96),a.render(e,r),a.domElement.toDataURL()},le="materialBrushPresets",z=()=>JSON.parse(localStorage.getItem(le)||"{}"),Ie=(t,a)=>{let e=z(),r=a??guid(),n=s.userMaterialBrushPresets?.getFormResult()??{},o={};return n.albedo&&(o.albedo=n.albedo.toString()),n.metalness&&(o.metalness=Number(n.metalness)),n.roughness&&(o.roughness=Number(n.roughness)),n.emissive&&(o.emissive=n.emissive.toString()),n.height&&(o.height=Number(n.height)),e[r]=[o,t??"New Preset",Be(o)],localStorage.setItem(le,JSON.stringify(e)),r},ce=({metalness:t,roughness:a,emissive:e,height:r,albedo:n})=>{t!==void 0&&s.brushMetalnessSlider?.setValue(t||0,!0),a!==void 0&&s.brushRoughnessSlider?.setValue(a??1,!0),e!==void 0&&s.brushEmissiveColor?.set(e??"#000000"),r!==void 0&&s.brushHeightSlider?.setValue(Math.max(0,Math.min(1,r??.5)),!0),n!==void 0&&ColorPanel.set(n)},Re=W.extend({name:"UserPresetsDialog",data(){return{userPresets:{},channels:u}},methods:{applyPreset(t){try{let[a,e]=this.userPresets[t],{metalness:r,roughness:n,emissive:o,height:c,albedo:l}=a;ce({metalness:Number(r),roughness:Number(n),emissive:o.toString(),height:Number(c),albedo:l.toString()}),s.userMaterialBrushPresets?.hide(),Blockbench.showQuickMessage(`Preset "${e}" applied`,2e3)}catch{Blockbench.showQuickMessage("Failed to apply preset",2e3)}},deletePreset(t){Blockbench.showMessageBox({title:"Delete Preset",message:"Are you sure you want to delete this preset?",confirm:1,cancel:0,buttons:["Cancel","Delete"],checkboxes:{},width:400},a=>{if(a){let e=z(),r=this.userPresets[t][1]??t;delete e[t],localStorage.setItem("materialBrushPresets",JSON.stringify(e)),this.userPresets=e,Blockbench.showQuickMessage(`Preset "${r}" deleted`,2e3)}})},editPreset(t){s.userMaterialBrushPresets?.setFormValues({name:this.userPresets[t][1]??t,...this.userPresets[t][0]})},getSummary(t){return Object.entries(t).filter(([a])=>a in this.channels).map(([a,e])=>a==="albedo"||a==="emissive"?`${this.channels[a]?.label??a}: ${e}`:`${this.channels[a]?.label??a}: ${Number(e).toFixed(1)}`).join(`
`)}},computed:{presets(){return Object.entries(this.userPresets)}},mounted(){this.userPresets=z()},template:`
    <div>
      <ul class="list mobile_scrollbar preset_list">
        <li
          v-for="([key, [settings, name, image]]) in presets"
          :key="key"
          class="user_preset"
        >
          <div v-if="image" class="preset_preview" @click="editPreset(key)">
            <img :src="image" :alt="name" :title="getSummary(settings)" width="96" height="96" />
            <div class="preset_title">{{ name }}</div>
          </div>
          <div v-else>
            <div class="preset_title" @click="editPreset(key)" :title="getSummary(settings)">{{ name }}</div>
          </div>
          <div class="preset_buttons">
            <button class="delete_preset" type="button" @click="deletePreset(key)">
              <i class="material-icons">close</i>
            </button>
          </div>
        </li>
      </ul>
    </div>`});C.push(()=>{s.materialBrushStyles=Blockbench.addCSS(`
  .preset_list {
    display: grid;
    grid-template-columns: repeat(auto-fill, 96px);
    grid-gap: 8px;
    justify-content: start;
    align-items: start;
    margin: 0 auto;
    padding: 8px;
  }

  .user_preset {
    display: flex;
    justify-content: start;
    align-items: center;
    width: 100%;
    padding: 8px;
    position: relative;
  }

  .preset_title {
    font-size: 1em;
    color: var(--color-text);
  }

  .user_preset:hover .preset_title {
    color: var(--color-accent);
  }

  .preset_preview {
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .preset_buttons {
    display: flex;
    flex-direction: row;
    align-items: center;
    font-size: 0.8em;
    padding: 0 4px;
  }

  .preset_channel {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin: 0 8px;
    font-size: 0.8em;
  }

  .delete_preset {
    margin-left: 8px;
    padding: 4px;
    height: 24px;
    width: 24px;
    min-width: 24px;
    background-color: transparent;
    color: var(--color-text);
    border: none;
    border-radius: 100%;
    position: absolute;
    right: -8px;
    top: 0;
    filter: drop-shadow(0 0 2px var(--color-shadow));
  }

  .delete_preset .material-icons {
    font-size: 0.825em;
  }

  .delete_preset:hover {
    background: transparent;
    color: var(--color-accent);
  }

  .delete_preset:hover .material-icons {
    color: var(--color-accent);
  }
  `),s.brushMetalnessSlider=new NumSlider("slider_brush_metalness",{category:"paint",name:"Metalness",description:"Adjust the metalness of the brush",settings:{min:0,max:1,step:.01,default:0},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===u.metalness.id)!==void 0:!1}}),s.brushRoughnessSlider=new NumSlider("slider_brush_roughness",{category:"paint",name:"Roughness",description:"Adjust the roughness of the brush",settings:{min:0,max:1,step:.01,default:1},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===u.roughness.id)!==void 0:!1}}),s.brushEmissiveColor=new ColorPicker("brush_emissive_color",{category:"paint",name:"Emissive",description:"Adjust the emissive color of the brush",value:"#000000",condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===u.emissive.id)!==void 0:!1}}),s.brushHeightSlider=new NumSlider("slider_brush_height",{category:"paint",name:"Height",description:"Adjust the height of the brush",settings:{min:0,max:1,step:.01,default:.5},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===u.height.id)!==void 0:!1}}),s.materialBrushTool=new Tool("material_brush",{name:"Material Brush",description:"Paints across multiple texture layers",icon:"view_in_ar",paintTool:!0,cursor:"cell",category:"tools",toolbar:"brush",condition:{project:!0,selected:{texture:!0},modes:["paint"],method(){return S()?.layers_enabled??!1}},allowed_view_modes:"textured",brush:{blend_modes:!1,shapes:!0,size:!0,softness:!0,opacity:!0,offset_even_radius:!0,floor_coordinates:!0,changePixel(t,a,e,r,{size:n,softness:o,texture:c}){let l=F.fromSettings(),h=Object.keys(l.colors),x=e;return c.layers.forEach(g=>{if(!g.visible||!h.includes(g.channel))return;let m=l.getChannel(g.channel);m&&(g.ctx.fillStyle=m.getStyle(),g.ctx.fillRect(n*t,n*a,n,n),g.selected&&(x={r:m.r*255,g:m.g*255,b:m.b*255,a:r*255}))}),x}},onCanvasClick(t){Painter.startPaintToolCanvas(t,t.event)},onSelect(){Painter.updateNslideValues(),A()},click(){B()}}),s.loadBrushPreset=new Action("load_brush_preset",{icon:"stroke_full",name:"Material Brush Presets",description:"Load or save a brush preset",category:"paint",condition:{project:!0},click(){s.userMaterialBrushPresets=new Dialog("user_brush_presets",{id:"user_brush_presets",title:"Edit Material Brush",component:Re,part_order:["lines","component","form"],form:{albedo:{type:"color",label:"Albedo",value:ColorPanel.get(),toggle_enabled:!0},metalness:{type:"number",label:"Metalness",min:0,max:1,step:.01,full_width:!1,toggle_enabled:!0},roughness:{type:"number",label:"Roughness",min:0,max:1,step:.01,toggle_enabled:!0,full_width:!1},emissive:{type:"color",label:"Emissive",value:"#000000",toggle_enabled:!0},height:{type:"number",label:"Height",min:0,max:1,step:.01,toggle_enabled:!0}},onConfirm(t){ce({metalness:Number(t.metalness??s.brushMetalnessSlider?.get()),roughness:Number(t.roughness??s.brushRoughnessSlider?.get()),emissive:(t.emissive??s.brushEmissiveColor?.get()).toString(),height:Number(t.height??s.brushHeightSlider?.get()),albedo:(t.albedo??ColorPanel.get()).toString()})},buttons:["Close","Save","Apply"],cancelIndex:0,confirmIndex:2,onButton(t,a){t===1&&Blockbench.textPrompt("Save Preset","New Preset",e=>{e&&(Ie(e),Blockbench.showQuickMessage(`Preset "${e}" saved`,2e3))})}}).show()}}),MenuBar.addAction(s.materialBrushTool,"tools.0")});L.push(()=>{MenuBar.removeAction("tools.material_brush")});C.push(()=>{s.materialBrushPanel=new Panel("material_brush_panel",{name:"Material Brush",id:"material_brush_panel",icon:"view_in_ar",toolbars:[new Toolbar("material_brush_toolbar",{id:"material_brush_toolbar",children:["material_brush","load_brush_preset","slider_brush_metalness","slider_brush_roughness","brush_emissive_color","slider_brush_height"],name:"Material Settings"})],condition:{modes:["paint"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"right",default_position:{slot:"right_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"color",insert_before:"outliner"})});C.push(()=>{s.displaySettingsPanel=new Panel("display_settings",{name:"PBR Controls",id:"display_settings_panel",icon:"display_settings",toolbars:[new Toolbar("controls_toolbar",{id:"controls_toolbar",children:["toggle_pbr","correct_lights","display_settings_tone_mapping","display_settings_exposure","display_settings_reset_exposure","show_channel_select_menu"],name:"Display Settings"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"color"})});(()=>{let t=()=>{C.forEach(e=>e())},a=()=>{$(),L.forEach(e=>e()),Object.entries(s).forEach(([e,r])=>{try{r?.delete()}catch(n){console.warn(`Failed to delete ${e} action:`,n)}})};BBPlugin.register("pbr_preview",{version:"1.1.0",title:"PBR Tools",author:"Jason J. Gardner",description:"Create and view PBR materials in Blockbench. Export textures for Java and RenderDragon shaders.",tags:["Minecraft: Java Edition","Minecraft: Bedrock Edition","PBR"],icon:"icon.png",variant:"both",await_loading:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.3",onload:t,onunload:a})})();})();
