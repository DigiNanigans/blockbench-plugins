"use strict";(()=>{(()=>{let j,R,S,k,F,L,A,G,Q,M,z,J,V,ue,de,D,X,q,K,W,Y,Z,ee,te,ne,B,he,N,H,$,I,U={},c="pbr_preview",me="1.0.0",ae="_NONE_",l={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new THREE.Color(16777215)},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new THREE.Color(0)},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new THREE.Color(0)},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new THREE.Color(16777215)},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new THREE.Color(16777215)},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new THREE.Color("rgb(128, 128, 255)")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new THREE.Color(16777215)}},E=(n=!0)=>{let e=Project?Project.textures??Texture.all:Texture.all;return n?e.filter(t=>t.layers_enabled&&t.layers.length>0).flatMap(t=>t.layers):e};class x{constructor(e,t){this._scope=e??E(),this._materialUuid=t}merToCanvas(){let e=this.getTexture(l.emissive),t=this.getTexture(l.roughness),r=this.getTexture(l.metalness);if(!e&&!t&&!r){let{metalness:a,emissive:s,roughness:o}=this.decodeMer();a&&(r=x.makePixelatedCanvas(a)),s&&(e=x.makePixelatedCanvas(s)),o&&(t=x.makePixelatedCanvas(o))}return{emissiveMap:e,roughnessMap:t,metalnessMap:r}}getMaterial(e={}){let{emissiveMap:t,roughnessMap:r,metalnessMap:a}=this.merToCanvas(),s=new THREE.MeshStandardMaterial({map:this.getTexture(l.albedo)??x.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(i=>i.selected)?.canvas??Texture.getDefault().canvas),aoMap:this.getTexture(l.ao),bumpMap:this.getTexture(l.height),metalnessMap:a,metalness:a?Settings.get("global_metalness"):0,roughnessMap:r,roughness:r?Settings.get("global_roughness"):1,emissiveMap:t,emissiveIntensity:t?1:0,emissive:t?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:1,alphaTest:.5,...e}),o=this.getTexture(l.normal);return o&&(s.normalMap=o,s.normalScale=new THREE.Vector2(1,1)),s}saveTexture(e,t){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][e.id]=t.uuid,t.extend({channel:e.id}))}findTexture(e,t=!0){if(!Project)return null;let r=this._scope.find(i=>i.channel&&(i.channel===e||i.channel===e.id));if(r)return r;let a=typeof e=="string"?e:e.id;Project.pbr_materials??={};let s=Project.pbr_materials[this._materialUuid];if(!s&&t){let i=new RegExp(`_*${a}(.[^.]+)?$`,"i");return this._scope.find(u=>i.test(u.name))??null}let o=s?.[a];return o?this._scope.find(i=>i.uuid===o)??null:null}static makePixelatedCanvas(e){let t=new THREE.CanvasTexture(e,void 0,void 0,void 0,THREE.NearestFilter,THREE.NearestFilter);return t.needsUpdate=!0,t}getTexture(e){let t=this.findTexture(e);return t?x.makePixelatedCanvas(t.canvas):null}static extractChannel(e,t){let r=e.canvas,a=r.width,s=r.height,o=r.getContext("2d");if(!o||!a||!s)return null;let i=document.createElement("canvas");i.width=a,i.height=s;let u=i.getContext("2d");if(!u)return null;let h={r:0,g:1,b:2,a:3}[t],{data:d}=o.getImageData(0,0,a,s),g=new Uint8ClampedArray(a*s*4);for(let p=0;p<d.length;p+=4)g[p]=d[p+h],g[p+1]=d[p+h],g[p+2]=d[p+h],g[p+3]=255;let v=new ImageData(g,a,s);return u.putImageData(v,0,0),i}decodeMer(e=25.5){let t=this.findTexture("mer",!0);if(!t)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let r=x.extractChannel(t,"r"),a=x.extractChannel(t,"g"),s=x.extractChannel(t,"b"),o=x.extractChannel(t,"a"),i=document.createElement("canvas");i.width=t.img.width??16,i.height=t.img.height??16;let u=this.findTexture(l.albedo);u&&(i.width=u.img.width??16,i.height=u.img.height??16);let h=i.getContext("2d"),d=a?.getContext("2d"),g=u?.canvas?.getContext("2d");if(!h||!g||!d)return{metalness:r,emissive:a,roughness:s,sss:o};let v=g.getImageData(0,0,i.width,i.height),p=d.getImageData(0,0,i.width,i.height),_=new Uint8ClampedArray(i.width*i.height*4);for(let f=0;f<v.data.length;f+=4){if(p.data[f]>e){_[f]=v.data[f],_[f+1]=v.data[f+1],_[f+2]=v.data[f+2],_[f+3]=255;continue}_[f]=0,_[f+1]=0,_[f+2]=0,_[f+3]=255}return h.putImageData(new ImageData(_,i.width,i.height),0,0),{metalness:r,emissive:i,emissiveLevel:a,roughness:s,sss:o}}createMer(e=!1){let t=this.findTexture(l.metalness,e),r=this.findTexture(l.emissive,e),a=this.findTexture(l.roughness,e),s=this.findTexture("sss",!1),o=Math.max(t?.img.width??0,r?.img.width??0,a?.img.width??0,Project?Project.texture_width:0,16),i=Math.max(t?.img.height??0,r?.img.height??0,a?.img.height??0,Project?Project.texture_height:0,16),u=document.createElement("canvas");u.width=o,u.height=i;let h=u.getContext("2d");if(!h)return null;let d=t?.img?x.extractChannel(t,"r"):null,g=r?.img?x.extractChannel(r,"g"):null,v=a?.img?x.extractChannel(a,"b"):null,p=s&&s?.img?x.extractChannel(s,"a"):null,_=d?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),f=g?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),m=v?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),b=p?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(new Uint8ClampedArray(o*i*4).fill(255),o,i),C=new Uint8ClampedArray(o*i*4);for(let T=0;T<C.length;T+=4)C[T]=_.data[T],C[T+1]=f.data[T],C[T+2]=m.data[T],C[T+3]=b.data[T];return h.putImageData(new ImageData(C,o,i),0,0),u}static createNormalMap(e,t=!1){let r=e.canvas.getContext("2d");if(!r)return null;let a=Math.max(e.img.width??e.canvas.width,Project?Project.texture_width:0,16),s=Math.max(e.img.height??e.canvas.height,Project?Project.texture_height:0,16),{data:o}=r.getImageData(0,0,a,s),i=document.createElement("canvas"),u=i.getContext("2d");if(!u)return null;let h=(m,b)=>{let C=(m+b*a)*4;return o[C]/255};i.width=a,i.height=s,u.drawImage(e.img,0,0,a,s);let d=u.getImageData(0,0,a,s),g=d.data,v=m=>{let b=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]);return[m[0]/b,m[1]/b,m[2]/b]};for(let m=0;m<s;m++)for(let b=0;b<a;b++){let C=h(Math.max(b-1,0),m),T=h(Math.min(b+1,a-1),m),_e=h(b,Math.max(m-1,0)),be=h(b,Math.min(m+1,s-1)),ve=T-C,Te=be-_e,O=v([-ve,-Te,1]),P=(m*a+b)*4;g[P]=(O[0]+1)/2*255,g[P+1]=(O[1]+1)/2*255,g[P+2]=(O[2]+1)/2*255,g[P+3]=t?h(b,m)*255:255}u.putImageData(d,0,0);let p=i.toDataURL(),_=`${e.name.replace(/_height(map)?/i,"")}_normal`;if(e instanceof TextureLayer){let m=new TextureLayer({name:_,data_url:p},e.texture);return m.addForEditing(),m}let f=new Texture({name:_,saved:!1,particle:!1,keep_size:!1}).fromDataURL(p);return Project&&f.add(),f}}class y{constructor({colors:e}){this._colors={...Object.fromEntries(Object.keys(l).map(t=>[t,l[t].default??new THREE.Color(4294967040)])),...e}}get colors(){return this._colors}set colors(e){this._colors={...this._colors,...e}}getChannel(e){return this._colors[e]}static makeLinearColor(e){let t=Math.min(1,Math.max(0,e));return new THREE.Color(t,t,t).convertSRGBToLinear()}static fromSettings(){let e=Number(N.get()),t=Number(H.get()),r=$.get().toString(),a=Number(I.get()),s=ColorPanel.get(),o={[l.albedo.id]:new THREE.Color(s),[l.metalness.id]:y.makeLinearColor(e),[l.roughness.id]:y.makeLinearColor(t),[l.emissive.id]:new THREE.Color(r??"#000000"),[l.height.id]:y.makeLinearColor(a),[l.normal.id]:l.normal.default??new THREE.Color("#8080ff")};return new y({colors:o})}}z=new Property(TextureLayer,"enum","channel",{default:ae,values:Object.keys(l).map(n=>l[n].id),label:"PBR Channel",exposed:!1}),Z=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),ee=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),te=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!0,values:[],label:"PBR Mode"});let re=n=>{let e=Project?Project.selected_texture:Texture.all.find(r=>r.selected);if(!e)return;let t=new x(e.layers_enabled?e.layers:Project?Project.textures:null,e.uuid).createMer(!1);t&&t.toBlob(async r=>{if(!r)return;let[a,s]=Project?[`${e.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await r.arrayBuffer(),type:"PNG",name:a,extensions:["png"],resource_id:"mer",savetype:"image",startpath:s},n)})},w=n=>{if(!Project||Texture.all.length===0)return;let e=!1;Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(r=>{let s=t.faces[r].getTexture();if(!s)return;let o=Project.materials[s.uuid];o.isShaderMaterial&&!Project.bb_materials[s.uuid]&&(Project.bb_materials[s.uuid]=o);let i=new x(s.layers_enabled?s.layers.filter(u=>u.visible)??null:Project.textures,s.uuid).getMaterial(n);Project.materials[s.uuid]=THREE.ShaderMaterial.prototype.copy.call(i,o),Canvas.updateAllFaces(s),e=!0})}),Project.pbr_active=e},ge=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(n=>{n instanceof Cube&&Object.keys(n.faces).forEach(e=>{let r=n.faces[e].getTexture();if(!r)return;let a=Project.bb_materials[r.uuid];a&&(Project.materials[r.uuid]=a)})}),Project.pbr_active=!1,Canvas.updateAll())},se=(n,e)=>{let t=e??document.createElement("canvas"),r=t.getContext("2d");if(!r)return null;let a=Math.max(Project?Project.texture_width:16,16),s=Math.max(Project?Project.texture_height:16,16);return t.width=a,t.height=s,r.fillStyle=`rgb(${n.r*255}, ${n.g*255}, ${n.b*255})`,r.fillRect(0,0,a,s),t.toDataURL()},pe=()=>{if(!Project)return;let n=E();Project.textures.forEach(e=>{let t=new x(n,e.uuid),r=t.findTexture(l.normal,!1)?.name,a=t.findTexture(l.height,!1)?.name,s=t.findTexture(l.albedo,!1)?.name,o=t.findTexture(l.metalness,!1)?.name,i=t.findTexture(l.emissive,!1)?.name,u=t.findTexture(l.roughness,!1)?.name,h={};return s||(h.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!o&&!i&&!u&&(h.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},h.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},h.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),r&&a&&(h.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),M=new Dialog(`${c}_texture_set`,{id:`${c}_texture_set`,title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:h,onConfirm(d){let g=Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName(),v=o||i||u,p={format_version:"1.16.100","minecraft:texture_set":{color:(s?pathToName(s,!1):d.baseColor?.toHexString())??g,metalness_emissive_roughness:[d.metalness??0,d.emissive??0,d.roughness??255]}};d.depthMap==="normal"&&r?p["minecraft:texture_set"].normal=pathToName(r,!1):(!r||d.depthMap==="heightmap")&&a&&(p["minecraft:texture_set"].heightmap=pathToName(a,!1));let _=()=>Blockbench.export({content:JSON.stringify(p,null,2),type:"JSON",name:`${g}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path},()=>{Blockbench.showQuickMessage("Texture set created",2e3),M.hide()});if(v){re(f=>{p["minecraft:texture_set"].metalness_emissive_roughness=pathToName(f,!1),_()});return}_()},cancelIndex:1}),M.show(),M})},ie=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project"],oe=()=>Project&&Project.pbr_active&&w(),le=()=>{ie.forEach(n=>{Blockbench.addListener(n,oe)})},ce=()=>{ie.forEach(n=>{Blockbench.removeListener(n,oe)})},fe=()=>{G=new Setting("pbr_active",{category:"preview",name:"Enable PBR Preview",description:"Enables PBR preview in the editor",type:"toggle",default_value:!1,icon:"tonality",onChange(n){if(n){w(),le();return}ge(),ce()}}),q=new Setting("display_settings_correct_lights",{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview for PBR materials",type:"toggle",default_value:!1,icon:"light_mode",onChange(n){Preview.selected.renderer.physicallyCorrectLights=n,w()}}),K=new Setting("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:THREE.NoToneMapping,value:THREE.NoToneMapping,icon:"palette",options:{[THREE.NoToneMapping]:"None",[THREE.LinearToneMapping]:"Linear",[THREE.ReinhardToneMapping]:"Reinhard",[THREE.CineonToneMapping]:"Cineon",[THREE.ACESFilmicToneMapping]:"ACES"},onChange(n){Preview.selected.renderer.toneMapping=Number(n),w()}}),X=new Setting("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",default_value:1,icon:"exposure",step:.1,min:-2,max:2,onChange(n){Preview.selected.renderer.toneMappingExposure=Math.max(-2,Math.min(2,Number(n))),w()}}),W=new Setting("global_metalness",{category:"preview",name:"Global Metalness",description:"Adjusts the base metalness of the scene",type:"number",default_value:0,icon:"iron",step:.01,min:0,max:1}),Y=new Setting("global_roughness",{category:"preview",name:"Global Roughness",description:"Adjusts the base roughness of the scene",type:"number",default_value:0,icon:"grain",step:.01,min:0,max:1}),k=new Action(`${c}_generate_normal`,{icon:"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(TextureLayer.selected||Texture.all.find(n=>n.selected))!==void 0,click(){let n=TextureLayer.selected??Texture.all.find(a=>a.selected),e=new x(E(),n.uuid),t=TextureLayer.selected??Texture.all.find(a=>a.selected)??e.findTexture(l.height,!0);if(!t){Blockbench.showQuickMessage("No height map found",2e3);return}let r=x.createNormalMap(t);if(r){e.saveTexture(l.normal,r),r.select(),Blockbench.showQuickMessage("Normal map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate normal map",2e3)}}),S=new Action(`${c}_create_mer`,{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",click(){re()}}),j=new Action(`${c}_decode_mer`,{icon:"arrow_split",name:"Decode MER",description:"Decodes a MER texture map into metalness, emissive, and roughness channels",click(){let n=E(),e=TextureLayer.selected?.texture??Texture.all.find(s=>s.selected),t=new x(n,(e??n[0]).uuid),r=t.decodeMer();[l.metalness,l.emissive,l.roughness].forEach(s=>{let o=s.id,i=r[o];if(!i)return;let u=new TextureLayer({name:`${e?.name}_${o}`,data_url:i.toDataURL()},e.layers_enabled?e.texture:e);t.saveTexture(s,u)})}}),R=new Action(`${c}_create_texture_set`,{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){pe()},condition:{formats:["bedrock"],project:!0}}),L=new Action(`${c}_create_material_texture`,{icon:"stacks",name:"Create Material Texture",description:"Creates a new texture for a PBR material",click(){if(!Project)return;let n=new Texture({name:"New Material",saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}),e=se(new THREE.Color(8421504));e&&(n.fromDataURL(e).add().select(),Object.keys(l).forEach(t=>{let r=l[t],a=new TextureLayer({name:r.label,visible:!0},n);a.setSize(n.width,n.height);let s=se(r.default??new THREE.Color(0),a.canvas);s&&a.texture.fromDataURL(s),a.extend({channel:r.id}),a.addForEditing()}))}}),Object.entries(l).forEach(([n,e])=>{U[n]=new Action(`${c}_assign_channel_${n}`,{icon:e.icon??"tv_options_edit_channels",name:`Assign to ${e.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${e.label} channel`,category:"textures",condition:()=>Modes.paint&&TextureLayer.selected,click(t){let r=TextureLayer.selected;if(!r||!Project)return;Undo.initEdit({layers:[r]}),r.extend({channel:e.id});let a=r.texture;a.updateChangesAfterEdit(),Project.pbr_materials[a.uuid]||(Project.pbr_materials[a.uuid]={}),Object.entries(Project.pbr_materials[a.uuid]).forEach(([s,o])=>{o===r.uuid&&delete Project.pbr_materials[a.uuid][s]}),Project.pbr_materials[a.uuid][n]=r.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${r.name}" to ${e.label} channel`,2e3),w()}})}),F=new Action(`${c}_unassign_channel`,{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",click(){let n=TextureLayer.selected;if(!n||!Project)return;Undo.initEdit({layers:[n]});let{texture:e,channel:t}=n;e.updateChangesAfterEdit(),Project.pbr_materials[e.uuid]={},n.channel=ae,Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${n.name}" from ${t} channel`,2e3),w()}}),A=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",linked_setting:"pbr_active",default:!1,click(){},onChange(n){Blockbench.showQuickMessage(`PBR Preview is now ${n?"enabled":"disabled"}`,2e3)}}),D=new Toggle(`${c}_correct_lights`,{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",linked_setting:"display_settings_correct_lights",default:!1,onChange(n){Blockbench.showQuickMessage(`Physically corrected lighting is now ${n?"enabled":"disabled"}`,2e3)},click(){}}),J=new Menu(`${c}_channel_menu`,[...Object.keys(l).map(n=>`${c}_assign_channel_${n}`),`${c}_unassign_channel`],{onOpen(){w()}}),V=new Action(`${c}_show_channel_menu`,{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:()=>Modes.paint&&TextureLayer.selected,click(n){J.open(n)}}),N=new NumSlider("slider_brush_metalness",{category:"paint",name:"Metalness",description:"Adjust the metalness of the brush",settings:{min:0,max:1,step:.01,default:0},condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.metalness.id)!==void 0:!1}}),H=new NumSlider("slider_brush_roughness",{category:"paint",name:"Roughness",description:"Adjust the roughness of the brush",settings:{min:0,max:1,step:.01,default:1},condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.roughness.id)!==void 0:!1}}),$=new ColorPicker("brush_emissive_color",{category:"paint",name:"Emissive",description:"Adjust the emissive color of the brush",value:"#000000",condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.emissive.id)!==void 0:!1}}),I=new NumSlider("slider_brush_height",{category:"paint",name:"Height",description:"Adjust the height of the brush",settings:{min:0,max:1,step:.01,default:.5},condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.height.id)!==void 0:!1}}),B=new Tool("material_brush",{name:"Material Brush",description:"Paints across multiple texture layers",icon:"view_in_ar",paintTool:!0,cursor:"cell",condition:{project:!0,modes:["paint"]},brush:{blend_modes:!1,shapes:!0,size:!0,softness:!0,opacity:!0,offset_even_radius:!0,floor_coordinates:!0,changePixel(n,e,t,r,{size:a,softness:s,texture:o}){let i=y.fromSettings(),u=Object.keys(i.colors),h=t;return o.layers.forEach(d=>{if(!d.visible||!u.includes(d.channel))return;let g=i.getChannel(d.channel);g&&(d.ctx.fillStyle=g.getStyle(),d.ctx.fillRect(a*n,a*e,a,a),d.selected&&(h={r:g.r*255,g:g.g*255,b:g.b*255,a:r*255}))}),h}},onCanvasClick(n){Painter.startPaintToolCanvas(n,n.event)},onSelect(){w()},click(){w()}}),Q=new Panel(`${c}_display_settings`,{name:"PBR Settings",id:`${c}_display_settings_panel`,icon:"display_settings",toolbars:[new Toolbar(`${c}_controls_toolbar`,{id:`${c}_controls_toolbar`,children:["toggle_pbr",`${c}_correct_lights`,`${c}_show_channel_menu`,`${c}_create_material_texture`],name:"PBR"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"color"}),ne=new Panel(`${c}_material_brush_panel`,{name:"Material Brush",id:`${c}_material_brush_panel`,icon:"view_in_ar",toolbars:[new Toolbar(`${c}_material_brush_toolbar`,{id:`${c}_material_brush_toolbar`,children:["material_brush","slider_brush_metalness","slider_brush_roughness","brush_emissive_color","slider_brush_height"],name:"Material Brush"})],condition:()=>Modes.paint,component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"right",default_position:{slot:"right_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"color",insert_before:"outliner"}),MenuBar.addAction(S,"file.export"),MenuBar.addAction(k,"tools"),MenuBar.addAction(j,"tools"),MenuBar.addAction(R,"file.export"),MenuBar.addAction(A,"view"),MenuBar.addAction(D,"preview"),MenuBar.addAction(L,"tools"),MenuBar.addAction(B,"tools.0"),Object.entries(U).forEach(([n,e],t)=>{MenuBar.addAction(e,`image.${t}`)}),le()},xe=()=>{Object.entries(U).forEach(([n,e])=>{e.delete()}),MenuBar.removeAction(`file.export.${c}_create_mer`),MenuBar.removeAction(`file.export.${c}_create_texture_set`),MenuBar.removeAction(`tools.${c}_generate_normal`),ce(),Q?.delete(),M?.delete(),G?.delete(),L?.delete(),S?.delete(),k?.delete(),A?.delete(),j?.delete(),R?.delete(),z?.delete(),V?.delete(),X?.delete(),ue?.delete(),de?.delete(),D?.delete(),q?.delete(),K?.delete(),F?.delete(),ee?.delete(),Z?.delete(),te?.delete(),W?.delete(),Y?.delete(),B?.delete(),ne?.delete(),he?.delete(),N?.delete(),H?.delete(),$?.delete(),I?.delete()};BBPlugin.register(c,{version:me,title:"PBR Features",author:"Jason J. Gardner",description:"Create RTX/Deferred Rendering textures in Blockbench. Adds support for previewing PBR materials and exporting them in Minecraft-compatible formats.",tags:["PBR","RTX","Deferred Rendering"],icon:"icon.png",variant:"both",await_loading:!0,new_repository_format:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.1",onload:fe,onunload:xe})})();})();
