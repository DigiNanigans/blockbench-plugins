"use strict";(()=>{(()=>{let j,R,L,S,N,I,A,U,O,y,F,G,Q,C,z,D,k,J,$,X,q,V,K,W,B={},l="pbr_preview",se="1.0.0",Y="_NONE_",c={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new THREE.Color(16777215)},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new THREE.Color(0)},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new THREE.Color(0)},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new THREE.Color(16777215)},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new THREE.Color(16777215)},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new THREE.Color("rgb(128, 128, 255)")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new THREE.Color(16777215)}},E=(a=!0)=>{let e=Project?Project.textures??Texture.all:Texture.all;return a?e.filter(t=>t.layers.length>0).flatMap(t=>t.layers):e};class p{constructor(e,t){this._scope=e??E(),this._materialUuid=t}merToCanvas(){let e=this.getTexture(c.emissive),t=this.getTexture(c.roughness),n=this.getTexture(c.metalness);if(!e&&!t&&!n){let{metalness:r,emissive:s,roughness:o}=this.decodeMer();r&&(n=p.makePixelatedCanvas(r)),s&&(e=p.makePixelatedCanvas(s)),o&&(t=p.makePixelatedCanvas(o))}return{emissiveMap:e,roughnessMap:t,metalnessMap:n}}getMaterial(e={}){let{emissiveMap:t,roughnessMap:n,metalnessMap:r}=this.merToCanvas();return new THREE.MeshStandardMaterial({map:this.getTexture(c.albedo)??p.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(s=>s.selected)?.canvas??Texture.all[0].canvas),aoMap:this.getTexture(c.ao),normalMap:this.getTexture(c.normal),bumpMap:this.getTexture(c.height),metalnessMap:r,metalness:r?Settings.get("global_metalness"):0,roughnessMap:n,roughness:n?Settings.get("global_roughness"):0,emissiveMap:t,emissiveIntensity:t?1:0,emissive:t?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:1,alphaTest:.5,...e})}saveTexture(e,{uuid:t,extend:n}){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][e.id]=t,n({channel:e.id}))}findTexture(e,t=!0){if(!Project)return null;let n=this._scope.find(i=>i.channel&&(i.channel===e||i.channel===e.id));if(n)return n;let r=typeof e=="string"?e:e.id;Project.pbr_materials??={};let s=Project.pbr_materials[this._materialUuid];if(!s&&t){let i=new RegExp(`_*${r}(.[^.]+)?$`,"i");return this._scope.find(d=>i.test(d.name))??null}let o=s?.[r];return o?this._scope.find(i=>i.uuid===o)??null:null}static makePixelatedCanvas(e){let t=new THREE.CanvasTexture(e,void 0,void 0,void 0,THREE.NearestFilter,THREE.NearestFilter);return t.needsUpdate=!0,t}getTexture(e){let t=this.findTexture(e);return t?p.makePixelatedCanvas(t.canvas):null}static extractChannel(e,t){let n=e.canvas,r=n.width,s=n.height,o=n.getContext("2d");if(!o||!r||!s)return null;let i=document.createElement("canvas");i.width=r,i.height=s;let d=i.getContext("2d");if(!d)return null;let m={r:0,g:1,b:2,a:3}[t],{data:f}=o.getImageData(0,0,r,s),x=new Uint8ClampedArray(r*s*4);for(let h=0;h<f.length;h+=4)x[h]=f[h+m],x[h+1]=f[h+m],x[h+2]=f[h+m],x[h+3]=255;let T=new ImageData(x,r,s);return d.putImageData(T,0,0),i}decodeMer(e=25.5){let t=this.findTexture("mer",!0);if(!t)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let n=p.extractChannel(t,"r"),r=p.extractChannel(t,"g"),s=p.extractChannel(t,"b"),o=p.extractChannel(t,"a"),i=document.createElement("canvas");i.width=t.img.width??16,i.height=t.img.height??16;let d=this.findTexture(c.albedo);d&&(i.width=d.img.width??16,i.height=d.img.height??16);let m=i.getContext("2d"),f=r?.getContext("2d"),x=d?.canvas?.getContext("2d");if(!m||!x||!f)return{metalness:n,emissive:r,roughness:s,sss:o};let T=x.getImageData(0,0,i.width,i.height),h=f.getImageData(0,0,i.width,i.height),_=new Uint8ClampedArray(i.width*i.height*4);for(let g=0;g<T.data.length;g+=4){if(h.data[g]>e){_[g]=T.data[g],_[g+1]=T.data[g+1],_[g+2]=T.data[g+2],_[g+3]=255;continue}_[g]=0,_[g+1]=0,_[g+2]=0,_[g+3]=255}return m.putImageData(new ImageData(_,i.width,i.height),0,0),{metalness:n,emissive:i,emissiveLevel:r,roughness:s,sss:o}}createMer(e=!1){let t=this.findTexture(c.metalness,e),n=this.findTexture(c.emissive,e),r=this.findTexture(c.roughness,e),s=this.findTexture("sss",!1),o=Math.max(t?.img.width??0,n?.img.width??0,r?.img.width??0,Project?Project.texture_width:0,16),i=Math.max(t?.img.height??0,n?.img.height??0,r?.img.height??0,Project?Project.texture_height:0,16),d=document.createElement("canvas");d.width=o,d.height=i;let m=d.getContext("2d");if(!m)return null;let f=t?.img?p.extractChannel(t,"r"):null,x=n?.img?p.extractChannel(n,"g"):null,T=r?.img?p.extractChannel(r,"b"):null,h=s&&s?.img?p.extractChannel(s,"a"):null,_=f?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),g=x?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),u=T?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),b=h?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(new Uint8ClampedArray(o*i*4).fill(255),o,i),w=new Uint8ClampedArray(o*i*4);for(let v=0;v<w.length;v+=4)w[v]=_.data[v],w[v+1]=g.data[v],w[v+2]=u.data[v],w[v+3]=b.data[v];return m.putImageData(new ImageData(w,o,i),0,0),d}static createNormalMap(e,t=!1){let n=e.canvas.getContext("2d");if(!n)return null;let r=Math.max(e.img.width??e.canvas.width,Project?Project.texture_width:0,16),s=Math.max(e.img.height??e.canvas.height,Project?Project.texture_height:0,16),{data:o}=n.getImageData(0,0,r,s),i=document.createElement("canvas"),d=i.getContext("2d");if(!d)return null;let m=(u,b)=>{let w=(u+b*r)*4;return o[w]/255};i.width=r,i.height=s,d.drawImage(e.img,0,0,r,s);let f=d.getImageData(0,0,r,s),x=f.data,T=u=>{let b=Math.sqrt(u[0]*u[0]+u[1]*u[1]+u[2]*u[2]);return[u[0]/b,u[1]/b,u[2]/b]};for(let u=0;u<s;u++)for(let b=0;b<r;b++){let w=m(Math.max(b-1,0),u),v=m(Math.min(b+1,r-1),u),de=m(b,Math.max(u-1,0)),ue=m(b,Math.min(u+1,s-1)),me=v-w,he=ue-de,H=T([-me,-he,1]),P=(u*r+b)*4;x[P]=(H[0]+1)/2*255,x[P+1]=(H[1]+1)/2*255,x[P+2]=(H[2]+1)/2*255,x[P+3]=t?m(b,u)*255:255}d.putImageData(f,0,0);let h=i.toDataURL(),_=`${e.name.replace(/_height(map)?/i,"")}_normal`;if(e instanceof TextureLayer){let u=new TextureLayer({name:_,data_url:h},e.texture);return u.addForEditing(),u}let g=new Texture({name:_,saved:!1,particle:!1,keep_size:!1}).fromDataURL(h);return Project&&g.add(),g}}F=new Property(TextureLayer,"enum","channel",{default:Y,values:Object.keys(c).map(a=>c[a].id),label:"PBR Channel",exposed:!1}),V=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),K=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),W=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!0,values:[],label:"PBR Mode"});let Z=a=>{let e=Texture.all.find(n=>n.selected);if(!e)return;let t=new p(e.layers_enabled?e.layers:Project?Project.textures:null,e.uuid).createMer(!1);t&&t.toBlob(async n=>{if(!n)return;let[r,s]=Project?[`${e.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await n.arrayBuffer(),type:"PNG",name:r,extensions:["png"],resource_id:"mer",savetype:"image",startpath:s},a)})},M=a=>{if(!Project||Texture.all.length===0)return;let e=!1;Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(n=>{let s=t.faces[n].getTexture();if(!s)return;let o=Project.materials[s.uuid];o.isShaderMaterial&&!Project.bb_materials[s.uuid]&&(Project.bb_materials[s.uuid]=o);let i=new p(s.layers_enabled?s.layers.filter(d=>d.visible)??null:Project.textures,s.uuid).getMaterial(a);Project.materials[s.uuid]=THREE.ShaderMaterial.prototype.copy.call(i,o),Canvas.updateAllFaces(s),e=!0})}),Project.pbr_active=e},ie=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(a=>{a instanceof Cube&&Object.keys(a.faces).forEach(e=>{let n=a.faces[e].getTexture();if(!n)return;let r=Project.bb_materials[n.uuid];r&&(Project.materials[n.uuid]=r)})}),Project.pbr_active=!1,Canvas.updateAll())},ee=(a,e)=>{let t=e??document.createElement("canvas"),n=t.getContext("2d");if(!n)return null;let r=Math.max(Project?Project.texture_width:16,16),s=Math.max(Project?Project.texture_height:16,16);return t.width=r,t.height=s,n.fillStyle=`rgb(${a.r*255}, ${a.g*255}, ${a.b*255})`,n.fillRect(0,0,r,s),t.toDataURL()},oe=()=>{if(!Project)return;let a=E();Project.textures.forEach(e=>{let t=new p(a,e.uuid),n=t.findTexture(c.normal,!1)?.name,r=t.findTexture(c.height,!1)?.name,s=t.findTexture(c.albedo,!1)?.name,o=t.findTexture(c.metalness,!1)?.name,i=t.findTexture(c.emissive,!1)?.name,d=t.findTexture(c.roughness,!1)?.name,m={};return s||(m.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!o&&!i&&!d&&(m.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},m.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},m.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),n&&r&&(m.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),y=new Dialog(`${l}_texture_set`,{id:`${l}_texture_set`,title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:m,onConfirm(f){let x=Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName(),T=o||i||d,h={format_version:"1.16.100","minecraft:texture_set":{color:(s?pathToName(s,!1):f.baseColor?.toHexString())??x,metalness_emissive_roughness:[f.metalness??0,f.emissive??0,f.roughness??255]}};f.depthMap==="normal"&&n?h["minecraft:texture_set"].normal=pathToName(n,!1):(!n||f.depthMap==="heightmap")&&r&&(h["minecraft:texture_set"].heightmap=pathToName(r,!1));let _=()=>Blockbench.export({content:JSON.stringify(h,null,2),type:"JSON",name:`${x}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path},()=>{Blockbench.showQuickMessage("Texture set created",2e3),y.hide()});if(T){Z(g=>{h["minecraft:texture_set"].metalness_emissive_roughness=pathToName(g,!1),_()});return}_()},cancelIndex:1}),y.show(),y})},te=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project"],ae=()=>Project&&Project.pbr_active&&M(),ne=()=>{te.forEach(a=>{Blockbench.addListener(a,ae)})},re=()=>{te.forEach(a=>{Blockbench.removeListener(a,ae)})},le=()=>{U=new Setting("pbr_active",{category:"preview",name:"Enable PBR Preview",description:"Enables PBR preview in the editor",type:"toggle",default_value:!1,icon:"tonality",launch_setting:!0,onChange(a){if(a){M(),ne();return}ie(),re()}}),J=new Setting("display_settings_correct_lights",{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview for PBR materials",type:"toggle",default_value:!1,icon:"light_mode",condition:()=>!!Project,onChange(a){Preview.selected.renderer.physicallyCorrectLights=a,M()}}),$=new Setting("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:THREE.NoToneMapping,value:THREE.NoToneMapping,icon:"palette",options:{[THREE.NoToneMapping]:"None",[THREE.LinearToneMapping]:"Linear",[THREE.ReinhardToneMapping]:"Reinhard",[THREE.CineonToneMapping]:"Cineon",[THREE.ACESFilmicToneMapping]:"ACES"},onChange(a){Preview.selected.renderer.toneMapping=Number(a),M()}}),k=new Setting("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",default_value:1,icon:"exposure",step:.1,min:-2,max:2,onChange(a){Preview.selected.renderer.toneMappingExposure=Math.max(-2,Math.min(2,Number(a)))}}),X=new Setting("global_metalness",{category:"preview",name:"Global Metalness",description:"Adjusts the base metalness of the scene",type:"number",default_value:0,icon:"iron",step:.01,min:0,max:1}),q=new Setting("global_roughness",{category:"preview",name:"Global Roughness",description:"Adjusts the base roughness of the scene",type:"number",default_value:0,icon:"iron",step:.01,min:0,max:1}),S=new Action(`${l}_generate_normal`,{icon:"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(TextureLayer.selected||Texture.all.find(a=>a.selected))!==void 0,click(){let a=TextureLayer.selected??Texture.all.find(r=>r.selected),e=new p(E(),a.uuid),t=TextureLayer.selected??Texture.all.find(r=>r.selected)??e.findTexture(c.height,!0);if(!t){Blockbench.showQuickMessage("No height map found",2e3);return}let n=p.createNormalMap(t);if(n){e.saveTexture(c.normal,n),n.select(),Blockbench.showQuickMessage("Normal map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate normal map",2e3)}}),L=new Action(`${l}_create_mer`,{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",click(){Z()}}),j=new Action(`${l}_decode_mer`,{icon:"arrow_split",name:"Decode MER",description:"Decodes a MER texture map into metalness, emissive, and roughness channels",click(){let a=E(),e=TextureLayer.selected?.texture??Texture.all.find(s=>s.selected),t=new p(a,(e??a[0]).uuid),n=t.decodeMer();[c.metalness,c.emissive,c.roughness].forEach(s=>{let o=s.id,i=n[o];if(!i)return;let d=new TextureLayer({name:`${e?.name}_${o}`,data_url:i.toDataURL()},e.layers_enabled?e.texture:e);t.saveTexture(s,d)})}}),R=new Action(`${l}_create_texture_set`,{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){oe()}}),I=new Action(`${l}_create_material_texture`,{icon:"stacks",name:"Create Material Texture",description:"Creates a new texture for a PBR material",click(){if(!Project)return;let a=new Texture({name:"New Material",saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}),e=ee(new THREE.Color(8421504));e&&(a.fromDataURL(e).add().select(),Object.keys(c).forEach(t=>{let n=c[t],r=new TextureLayer({name:n.label,visible:!0},a);r.setSize(a.width,a.height);let s=ee(n.default??new THREE.Color(0),r.canvas);s&&r.texture.fromDataURL(s),r.extend({channel:t}),a.layers.push(r)}))}}),Object.entries(c).forEach(([a,e])=>{B[a]=new Action(`${l}_assign_channel_${a}`,{icon:e.icon??"tv_options_edit_channels",name:`Assign to ${e.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${e.label} channel`,category:"textures",condition:()=>Modes.paint&&TextureLayer.selected,click(t){let n=TextureLayer.selected;if(!n||!Project)return;Undo.initEdit({layers:[n]}),n.extend({channel:a});let r=n.texture;r.updateChangesAfterEdit(),Project.pbr_materials[r.uuid]||(Project.pbr_materials[r.uuid]={}),Object.entries(Project.pbr_materials[r.uuid]).forEach(([s,o])=>{o===n.uuid&&delete Project.pbr_materials[r.uuid][s]}),Project.pbr_materials[r.uuid][a]=n.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${n.name}" to ${e.label} channel`,2e3),M()}})}),N=new Action(`${l}_unassign_channel`,{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",click(){let a=TextureLayer.selected;if(!a||!Project)return;Undo.initEdit({layers:[a]});let{texture:e,channel:t}=a;e.updateChangesAfterEdit(),Project.pbr_materials[e.uuid]={},a.channel=Y,Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${a.name}" from ${t} channel`,2e3),M()}}),A=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",linked_setting:"pbr_active",default:!1,click(){},onChange(a){Blockbench.showQuickMessage(`PBR Preview is now ${a?"enabled":"disabled"}`,2e3)}}),D=new Toggle(`${l}_correct_lights`,{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",linked_setting:"display_settings_correct_lights",default:!1,onChange(a){Blockbench.showQuickMessage(`Physically corrected lighting is now ${a?"enabled":"disabled"}`,2e3)},click(){}}),C=new BarSlider(`${l}_exposure`,{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",icon:"exposure",min:-2,max:2,step:.1,value:Settings.get("display_settings_exposure")??1,display_condition:{modes:["edit","paint","animate"],project:!0},onChange({value:a}){k.set(a)}}),C.addLabel(!0,C),G=new Menu(`${l}_channel_menu`,[...Object.keys(c).map(a=>`${l}_assign_channel_${a}`),`${l}_unassign_channel`],{onOpen(){M()}}),Q=new Action(`${l}_show_channel_menu`,{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:()=>Modes.paint&&TextureLayer.selected,click(a){G.open(a)}}),z=new BarSelect(`${l}_tonemapping`,{category:"preview",name:"Tone Mapping",description:"Select the tone mapping function",icon:"palette",value:THREE.NoToneMapping,linked_setting:"display_settings_tone_mapping",options:{[THREE.NoToneMapping]:{name:"No Tone Mapping",icon:"invert_colors_off"},[THREE.LinearToneMapping]:{name:"Linear",icon:"linear_scale"},[THREE.ReinhardToneMapping]:{name:"Reinhard",icon:"brightness_medium"},[THREE.CineonToneMapping]:{name:"Cineon",icon:"brightness_high"},[THREE.ACESFilmicToneMapping]:{name:"ACES",icon:"brightness_auto"}},onChange({value:a}){$.set(a),M()}}),O=new Panel(`${l}_display_settings`,{name:"PBR Settings",id:`${l}_display_settings_panel`,icon:"display_settings",toolbars:[new Toolbar(`${l}_controls_toolbar`,{id:`${l}_controls_toolbar`,children:["toggle_pbr",`${l}_correct_lights`,`${l}_show_channel_menu`,`${l}_create_material_texture`],name:"PBR"}),new Toolbar(`${l}_display_settings_toolbar`,{id:`${l}_display_settings_toolbar`,children:[`${l}_tonemapping`,`${l}_exposure`],name:"Display Settings"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"paint"}),MenuBar.addAction(L,"file.export"),MenuBar.addAction(S,"tools"),MenuBar.addAction(j,"tools"),MenuBar.addAction(R,"file.export"),MenuBar.addAction(A,"view"),MenuBar.addAction(D,"preview"),Object.entries(B).forEach(([a,e],t)=>{MenuBar.addAction(e,`image.${t}`)}),ne()},ce=()=>{Object.entries(B).forEach(([a,e])=>{e.delete()}),MenuBar.removeAction(`file.export.${l}_create_mer`),MenuBar.removeAction(`file.export.${l}_create_texture_set`),MenuBar.removeAction(`tools.${l}_generate_normal`),re(),O?.delete(),y?.delete(),U?.delete(),I?.delete(),L?.delete(),S?.delete(),A?.delete(),j?.delete(),R?.delete(),F?.delete(),Q?.delete(),k?.delete(),C?.delete(),z?.delete(),D?.delete(),J?.delete(),$?.delete(),N?.delete(),K?.delete(),V?.delete(),W?.delete(),X?.delete(),q?.delete()};BBPlugin.register(l,{version:se,title:"PBR Features",author:"Jason J. Gardner",description:"Create RTX/Deferred Rendering textures in Blockbench. Adds support for previewing PBR materials and exporting them in Minecraft-compatible formats.",tags:["PBR","RTX","Deferred Rendering"],icon:"icon.png",variant:"both",await_loading:!0,new_repository_format:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.1",onload:le,onunload:ce})})();})();
